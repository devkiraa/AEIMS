<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book an Event</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }

        /* Blue header section */
        .top-border {
            background-color: #3563E9;
            height: 10vh; /* 10% of the viewport height */
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
        }

        /* Navigation styles */
        .nav-links {
            display: flex;
            align-items: center;
            list-style: none;
            margin: 0;
        }

        .nav-links li {
            margin: 0 15px;
        }

        .nav-links a {
            text-decoration: none;
            color: white;
            font-size: 16px;
            font-weight: 500;
        }

        /* Button colors for venue status */
        .available {
            background-color: #27AE60;
            color: white;
        }

        .waiting {
            background-color: #F2C94C;
            color: white;
        }

        .booked {
            background-color: #EB5757;
            color: white;
            cursor: not-allowed;
        }

        .booked[disabled] {
            background-color: #EB5757 !important;
            cursor: not-allowed;
        }

        /* Button styles */
        .venue-btn {
            padding: 12px 24px;
            font-size: 16px;
            border-radius: 8px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin: 10px;
        }

        /* Legend styles */
        .legend {
            display: flex;
            align-items: center;
            margin-top: 20px;
        }

        .legend span {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 4px;
            margin-right: 8px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin-right: 20px;
        }

        /* Profile icon */
        .profile-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: white;
        }

        /* Styling for form inputs */
        .input-field {
            width: 170px; /* Fixed width to fit dd-mm-yyyy */
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 6px;
            margin: 0px 0;
        }

        /* Adjusting spacing and alignment between date and time fields */
        .form-row {
            display: flex;
            justify-content: flex-start; /* Align to left */
            align-items: center;
            gap: 170px; /* Space equal to the width of one input */
            margin-bottom: 20px; /* Optional: Add some space below each row */
        }

        .form-row > .input-group {
            display: flex;
            flex-direction: column;
        }

        .quick-row {
            display: flex;
            justify-content: flex-start; /* Align to left */
            align-items: center;
            gap: 40px; /* Space equal to the width of one input */
            margin-bottom: 20px; /* Optional: Add some space below each row */
            margin-top: 35px;
        }

        .event-row {
            display: none; /* Initially hidden */
            justify-content: flex-start; /* Align to left */
            align-items: center;
            gap: 50px; /* Space equal to the width of one input */
            margin-bottom: 20px; /* Optional: Add some space below each row */
        }

        .radio-label {
            display: inline-flex;
            align-items: center;
            margin-right: 1.5rem;
        }

        /* Fixed position for buttons */
        .form-buttons {
            position: fixed;
            bottom: 20px;
            right: 20px;
        }

        /* Next button styling similar to the Add Guest Details page */
        .next-btn {
            background-color: #2563EB; /* Tailwind blue-600 */
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 500;
            align-items: center;
            justify-content: center;
        }

        .next-btn:hover {
            background-color: #1D4ED8; /* Tailwind blue-700 */
        }

        .venue-btn[disabled] {
            background-color: #cccccc; /* Light gray to indicate disabled state */
            color: white;
            cursor: not-allowed;
        }

        /* Popup Styles */
        .popup-overlay {
            background-color: rgba(0, 0, 0, 0.5);
        }
        .popup-content {
            position: relative;
        }
        .popup-close {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            cursor: pointer;
            font-size: 1.5rem;
            color: #4B5563;
            transition: color 0.3s;
        }
        .popup-close:hover {
            color: #EF4444;
        }
    </style>

    <script>
        function toggleEventTitle() {
            const eventTitleRow = document.getElementById('event-row');
            const quickEventRow = document.querySelector('.quick-row');
            const isQuickEvent = document.querySelector('input[name="quick_event"]:checked').value === 'yes';
            const nextButton = document.querySelector('.next-btn');

            if (isQuickEvent) {
                eventTitleRow.style.display = 'flex'; // Show the event title row
                quickEventRow.style.marginBottom = '15px'; // Reduce the margin when 'Yes' is selected
                nextButton.innerHTML = 'Submit'; // Change the text to 'Submit'
            } else {
                eventTitleRow.style.display = 'none'; // Hide the event title row
                quickEventRow.style.marginBottom = '20px'; // Add a 30px margin when 'No' is selected
                nextButton.innerHTML = 'Next <!-- Right Arrow SVG --> <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor"> <path fill-rule="evenodd" d="M12.293 10.707l-5.146 5.146a.5.5 0 01-.708-.708L11.293 10 6.44 5.146a.5.5 0 01.708-.708l5.146 5.146a.5.5 0 010 .708z" clip-rule="evenodd" /> </svg>'; // Change the text to 'Next'
            }
        }

        // Function to set today's date as the minimum for Start Date and End Date
        function setMinDate() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('start-date').setAttribute('min', today);
            document.getElementById('end-date').setAttribute('min', today);
        }

        // Update min value of End Date based on selected Start Date
        function updateEndDateMin() {
            const startDate = document.getElementById('start-date').value;
            const endDateInput = document.getElementById('end-date');

            if (startDate) {
                endDateInput.setAttribute('min', startDate);
            } else {
                setMinDate(); // Reset to today's date if no start date selected
            }
        }

        // Update min value of End Time based on selected Start Time (for same day)
        function updateEndTimeMin() {
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;
            const startTime = document.getElementById('start-time').value;
            const endTimeInput = document.getElementById('end-time');

            if (startDate && endDate && startDate === endDate && startTime) {
                endTimeInput.setAttribute('min', startTime);
            } else {
                endTimeInput.removeAttribute('min'); // Reset min if not needed
            }
        }

        // Trigger availability check only when all inputs are filled
        async function checkAvailability() {
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;
            const startTime = document.getElementById('start-time').value;
            const endTime = document.getElementById('end-time').value;

            if (!(startDate && endDate && startTime && endTime)) return;

            try {
                const response = await fetch('/api/check-availability', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ startDate, endDate, startTime, endTime }),
                });

                if (!response.ok) throw new Error('Failed to fetch venue availability');
                const venues = await response.json();
                updateVenues(venues);
            } catch (error) {
                console.error('Error fetching availability:', error);
            }
        }

        // Update venue buttons based on availability
        function updateVenues(venues) {
            document.querySelectorAll('.venue-btn').forEach((button) => {
                const status = venues[button.id] || 'booked';
                button.classList.remove('available', 'waiting', 'booked');
                button.classList.add(status);
                button.disabled = status === 'booked';
            });
        }

        // Function to check if all required fields are filled
        function checkRequiredFields() {
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;
            const startTime = document.getElementById('start-time').value;
            const endTime = document.getElementById('end-time').value;
            const eventTitle = document.getElementById('event_title').value;

            const nextButton = document.querySelector('.next-btn');

            // Check if the button is for "Next" or "Submit"
            const isNextButton = nextButton.innerHTML.includes('Next');

            // Check if all fields are filled and a venue is selected
            if (isNextButton) {
                if (startDate && endDate && startTime && endTime && selectedVenue) {
                    nextButton.classList.remove('hidden', 'disabled');
                    nextButton.disabled = false;
                } else {
                    nextButton.classList.add('hidden', 'disabled');
                    nextButton.disabled = true;
                }
            } else {
                // For the "Submit" button
                if (startDate && endDate && startTime && endTime && eventTitle && selectedVenue) {
                    nextButton.classList.remove('hidden', 'disabled');
                    nextButton.disabled = false;
                } else {
                    nextButton.classList.add('hidden', 'disabled');
                    nextButton.disabled = true;
                }
            }
        }

        // Highlight clicked venue button and store its ID
        function highlightSelectedButton(event) {
            const clickedButton = event.target;

            // Remove border from all buttons
            document.querySelectorAll('.venue-btn').forEach((button) => {
                button.style.border = 'none';
            });

            // Add border to the clicked button (only if not disabled)
            if (!clickedButton.disabled) {
                clickedButton.style.border = '2px solid #3563E9';

                switch (clickedButton.id) {
                    case 'cslb1':
                        selectedVenue = 1;
                        break;
                   case 'cslb2':
                       selectedVenue = 2;
                       break;
                   case 'cslb3':
                        selectedVenue = 3;
                        break;
                    case 'cslb4':
                        selectedVenue = 4;
                        break;
                    case 'cslb5':
                        selectedVenue = 5;
                        break;
                    case 'cslb6':
                        selectedVenue = 6;
                        break;
                    case 'audt':
                        selectedVenue = 7;
                        break;
                    case 'semh':
                        selectedVenue = 8;
                        break;
                    case 'confh':
                        selectedVenue = 9;
                        break;
                    case 'prah':
                        selectedVenue = 10;
                        break;
                    case 'lib':
                        selectedVenue = 11;
                        break;
                    case 'dal':
                        selectedVenue = 12;
                        break;
                    case 'cirsh':
                        selectedVenue = 13;
                        break;
                    default:
                        showErrorPopup('Unknown venue selected!');
                        console.error('404 Not Found: Unknown venue selected.');
                        return;
                }

                checkRequiredFields();
            }
        }

        function attachVenueButtonListeners() {
            document.querySelectorAll('.venue-btn').forEach((button) => {
                button.addEventListener('click', highlightSelectedButton);
            });
        }

                // Handle input changes and trigger availability check
        function handleInputChange() {
            const allFilled = ['start-date', 'end-date', 'start-time', 'end-time']
                .every((id) => document.getElementById(id).value);

            if (allFilled) checkAvailability();
            checkRequiredFields();
        }

        let selectedVenue = null; // To store the selected venue's ID

        document.addEventListener('DOMContentLoaded', () => {
            // Attach event listeners for input fields to trigger availability check
            ['start-date', 'end-date', 'start-time', 'end-time', 'event_title'].forEach((id) => {
                document.getElementById(id).addEventListener('input', handleInputChange);
            });

            document.getElementById('start-date').addEventListener('change', updateEndDateMin);
            document.getElementById('start-time').addEventListener('change', updateEndTimeMin);
            document.getElementById('end-date').addEventListener('change', updateEndDateMin);
            document.getElementById('end-time').addEventListener('change', updateEndTimeMin);

            attachVenueButtonListeners(); // Attach venue button listeners

            // Handle the next/submit button click event
            document.querySelector('.next-btn').addEventListener('click', handleButtonClick);

            window.onload = setMinDate;
        });

        // Function to open the error popup with a message
        function showErrorPopup(message) {
            document.getElementById('errorPopupContent').innerText = message;
            document.getElementById('errorPopup').classList.remove('hidden');
        }

        // Function to close the error popup
        function closeErrorPopup() {
            document.getElementById('errorPopup').classList.add('hidden');
        }

        // Handle button click (Next/Submit)
        async function handleButtonClick(event) {
            const nextButton = event.currentTarget; // Use currentTarget instead of target

            if (nextButton.innerText.trim() === 'Next') {
                // Gather form data
                const startDate = document.getElementById('start-date').value;
                const endDate = document.getElementById('end-date').value;
                const startTime = document.getElementById('start-time').value;
                const endTime = document.getElementById('end-time').value;

                // Store data in sessionStorage
                sessionStorage.setItem('eventData', JSON.stringify({
                    startDate,
                    endDate,
                    startTime,
                    endTime,
                    venue: selectedVenue,
                }));

                // Redirect to another page if "Next" is clicked
                window.location.href = '/book-event/event-details';
            } else if (nextButton.innerText.trim() === 'Submit') {
                // Gather form data
                const startDate = document.getElementById('start-date').value;
                const endDate = document.getElementById('end-date').value;
                const startTime = document.getElementById('start-time').value;
                const endTime = document.getElementById('end-time').value;
                const eventTitle = document.getElementById('event_title').value;

                // Ensure all inputs and venue selection are filled
                if (!startDate || !endDate || !startTime || !endTime || !eventTitle || !selectedVenue) {
                    alert('Please fill all the fields and select a venue.');
                    return;
                }

                try {
                    // Send POST request to backend
                    const response = await fetch('/api/quick-event', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            startDate,
                            endDate,
                            startTime,
                            endTime,
                            eventTitle,
                            venue: selectedVenue, // Include selected venue ID
                        }),
                    });

                    if (response.ok) {
                        alert('Event created successfully!');
                        window.location.href = '/book-event/confirmation'; // Redirect on success
                    } else {
                        alert('Failed to create event. Please try again.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred. Please try again later.');
                }
            }
        }
        
        // Function to validate and enforce 12-hour format (hh:mm AM/PM)
        function validateTimeFormat(input) {
            const timePattern = /^(0[1-9]|1[0-2]):([0-5][0-9])\s?(AM|PM)$/i;
            return timePattern.test(input);
        }

        // Event listener to check time format on input
        document.querySelectorAll('.input-field').forEach(inputField => {
            inputField.addEventListener('blur', (event) => {
                const input = event.target;
                if (!validateTimeFormat(input.value)) {
                    alert('Please enter the time in the format hh:mm AM/PM');
                    input.value = '';  // Clear incorrect input
                }
            });
        });
        document.addEventListener('DOMContentLoaded', function () {
            const profileButton = document.getElementById('profileButton');
            const profileDropdown = document.getElementById('profileDropdown');

            // Toggle dropdown on button click
            profileButton.addEventListener('click', (event) => {
                event.stopPropagation();
                profileDropdown.classList.toggle('hidden');
            });

            // Close dropdown if clicked outside
            document.addEventListener('click', (event) => {
                if (!profileDropdown.classList.contains('hidden') && !profileDropdown.contains(event.target) && event.target !== profileButton) {
                    profileDropdown.classList.add('hidden');
                }
            });
        });
        window.onload = setMinDate;
    </script>
</head>
<body class="min-h-screen bg-gray-100">
    <!-- Navbar -->
    <nav class="bg-blue-600 p-4">
        <div class="container mx-auto flex justify-between items-center">
            <!-- Navbar Links -->
            <div class="flex items-center space-x-6">
                <ul class="flex space-x-6 text-white">
                    <!-- Home Link - Always First -->
                    <li><a href="/" class="hover:text-gray-300">Home</a></li>
            
                    <!-- Conditional Links for 'admin' or 'icts' -->
                    <% if (userRole === 'admin' || userRole === 'icts') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                        <li><a href="/inventory" class="hover:text-gray-300">Inventory</a></li>
                        <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                    <% } %>
            
                    <!-- Conditional Links for 'hod' -->
                    <% if (userRole === 'hod') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                        <li><a href="/dept-events" class="hover:text-gray-300">Dept Events</a></li>
                        <li><a href="/event-approval" class="hover:text-gray-300">Approval</a></li>
                    <% } %>
            
                    <!-- Conditional Links for 'em' -->
                    <% if (userRole === 'em') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                    <% } %>
            
                    <!-- About Us Link - Always Last -->
                    <li><a href="/about-us" class="hover:text-gray-300">About Us</a></li>
                </ul>
            </div>     
            <!-- Profile Dropdown (Visible on Click) -->
            <div class="relative dropdown">
                <button class="bg-white rounded-full p-2" id="profileButton">
                    <img src="/assets/icons/avatar.svg" alt="User Icon" class="w-6 h-6">
                </button>
                <div class="dropdown-menu absolute hidden right-0 mt-2 w-48 bg-white rounded-lg shadow-lg" id="profileDropdown">
                    <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Profile</a>
                    <a href="/change-password" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Change Password</a>
                    <a href="/logout" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Logout</a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main container -->
    <div class="max-w-7xl mx-auto px-8 py-6">
        <h1 class="text-3xl font-semibold mb-6">Book an Event!</h1>

        <!-- Date and time selection -->
        <div class="form-row">
            <div class="input-group">
                <label class="block mb-2 text-gray-700">Start Date</label>
                <input type="date" id="start-date" class="input-field" required>
            </div>
            <div class="input-group">
                <label class="block mb-2 text-gray-700">End Date</label>
                <input type="date" id="end-date" class="input-field" required>
            </div>
        </div>

        <!-- Popup Modal for Error Messages -->
        <div id="errorPopup" class="fixed inset-0 hidden flex items-center justify-center popup-overlay">
            <div class="bg-white p-6 rounded-lg shadow-lg max-w-lg w-full popup-content">
                <!-- Close Icon -->
                <span class="popup-close" onclick="closeErrorPopup()">&times;</span>

                <h2 class="text-xl font-semibold mb-4">Error</h2>
                <div id="errorPopupContent">
                    <!-- Error message will be populated dynamically -->
                </div>

                <div class="mt-4 text-right">
                    <button onclick="closeErrorPopup()" class="bg-blue-600 text-white px-4 py-2 rounded-lg">
                        Close
                    </button>
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="input-group">
                <label class="block mb-2 text-gray-700">Start Time</label>
                <input type="time" id="start-time" class="input-field" required>
            </div>
            <div class="input-group">
                <label class="block mb-2 text-gray-700">End Time</label>
                <input type="time" id="end-time" class="input-field" required>
            </div>
        </div>

        <div class="quick-row">
            <label class="block text-gray-700">Quick Event</label>
            <div>
                <label class="radio-label">
                    <input type="radio" name="quick_event" value="yes" onclick="toggleEventTitle()">
                    Yes
                </label>
                <label class="radio-label">
                    <input type="radio" name="quick_event" value="no" checked onclick="toggleEventTitle()">
                    No
                </label>
            </div>
        </div>

        <!-- Event title, hidden by default -->
        <div id="event-row" class="event-row">
            <label for="event_title" class="block text-gray-700">Event Title</label>
            <input type="text" name="event_title" id="event_title" placeholder="Event title...?" class="w-96 p-2 border border-gray-300 rounded mt-1" required>
        </div>

        <!-- Venue buttons -->
        <div class="mb-6">
            <div class="flex flex-wrap">
                <button class="venue-btn" id="cslb1" disabled>CS Lab 1</button>
                <button class="venue-btn" id="cslb2" disabled>CS Lab 2</button>
                <button class="venue-btn" id="cslb3" disabled>CS Lab 3</button>
                <button class="venue-btn" id="cslb4" disabled>CS Lab 4</button>
                <button class="venue-btn" id="cslb5" disabled>CS Lab 5</button>
                <button class="venue-btn" id="cslb6" disabled>CS Lab 6</button>
                <button class="venue-btn" id="audt" disabled>Auditorium</button>
                <button class="venue-btn" id="semh" disabled>Seminar Hall</button>
                <button class="venue-btn" id="confh" disabled>Conference Room</button>
                <button class="venue-btn" id="prah" disabled>Prayer Hall</button>
                <button class="venue-btn" id="lib" disabled>Library</button>
                <button class="venue-btn" id="dal" disabled>Data Analytics Lab</button>
                <button class="venue-btn" id="cirsh" disabled>CIR Seminar Hall</button>
            </div>
        </div>

        <!-- Legend -->
        <div class="legend">
            <div class="legend-item">
                <span class="available"></span> Available
            </div>
            <div class="legend-item">
                <span class="waiting"></span> Waiting
            </div>
            <div class="legend-item">
                <span class="booked"></span> Booked
            </div>
        </div>

    <!-- Fixed Back and Next buttons -->
    <div class="form-buttons flex space-x-4">
        <button class="next-btn flex hidden disabled" disabled>
            Next
            <!-- Right Arrow SVG -->
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M12.293 10.707l-5.146 5.146a.5.5 0 01-.708-.708L11.293 10 6.44 5.146a.5.5 0 01.708-.708l5.146 5.146a.5.5 0 010 .708z" clip-rule="evenodd" />
            </svg>
        </button>
    </div>
</body>
</html>