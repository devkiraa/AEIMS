<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Navbar -->
    <nav class="bg-blue-600 p-4">
        <div class="container mx-auto flex justify-between items-center">
            <!-- Navbar Links -->
            <div class="flex items-center space-x-6">
                <ul class="flex space-x-6 text-white">
                    <li><a href="/" class="hover:text-gray-300">Home</a></li>
                    <% if (userRole === 'admin' || userRole === 'icts') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                        <li><a href="/inventory" class="hover:text-gray-300">Inventory</a></li>
                        <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                    <% } %>
                    <% if (userRole === 'hod') { %>
                        <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                        <li><a href="/dept-events" class="hover:text-gray-300">Dept Events</a></li>
                        <li><a href="/event-approval" class="hover:text-gray-300">Approval</a></li>
                    <% } %>
                    <% if (userRole === 'em') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                    <% } %>
                    <li><a href="/about-us" class="hover:text-gray-300">About Us</a></li>
                </ul>
            </div>
            <div class="relative dropdown">
                <button class="bg-white rounded-full p-2" id="profileButton">
                    <img src="/assets/icons/avatar.svg" alt="User Icon" class="w-6 h-6">
                </button>
                <div class="dropdown-menu absolute hidden right-0 mt-2 w-48 bg-white rounded-lg shadow-lg" id="profileDropdown">
                    <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Profile</a>
                    <a href="/change-password" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Change Password</a>
                    <a href="/logout" class="block px-4 py-2 text-gray-700 hover:bg-gray-100" onclick="sessionStorage.clear()">Logout</a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-2xl font-semibold mb-4">Welcome <%= userName %></h1>

        <!-- Happening Now Section -->
<div id="happening-now-container" class="container mx-auto px-4 py-4 mb-4 hidden">
    <div class="bg-white-200 rounded-lg shadow-lg p-4 flex items-center">
        <div class="w-1/3 mr-4">
            <img id="happeningNowBanner" src="" alt="Happening Now Event Banner" class="w-full h-40 object-cover rounded-lg">
        </div>
        <div class="flex-1">
            <h2 class="text-2xl font-bold text-gray-800">Happening Today: <span id="happeningNowName"></span></h2>
            <h2 class="text-lg font-bold text-gray-600 mb-2"><span id="happeningNowDepartment"></span></h2>
            <p id="happeningNowDescription" class="text-gray-700 mb-4"></p>
            <p class="text-sm text-blue-500" id="happeningNowTime"></p>
            <p class="text-sm text-gray-500" id="happeningNowLocation"></p>
        </div>
    </div>
</div>


        <!-- Upcoming Events Section -->
        <h2 class="text-xl font-bold text-gray-700 mb-4">Upcoming Events</h2>
        <div id="upcoming-events-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Upcoming events will be populated here by JavaScript -->
        </div>

        <!-- Past Events Section -->
        <h2 class="text-xl font-bold text-gray-700 mb-4 mt-8">Past Events</h2>
        <div id="past-events-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Past events will be populated here by JavaScript -->
        </div>
    </div>

    <!-- Event Details Modal -->
<div id="eventModal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex justify-center items-center hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-3xl w-full flex">
        <!-- Modal Content Area -->
        <div class="flex-1 pr-6">
            <button id="closeModal" class="absolute top-2 right-2 text-gray-600">X</button>
            <h3 id="modalEventName" class="text-2xl font-semibold"></h3>
            <h2 id="modalEventDepartment" class="text-lg text-gray-500 mb-2"></h2>
            <p id="modalEventDescription" class="text-gray-700 mb-4"></p>
            <p id="modalEventType" class="text-sm text-gray-500 mb-2"></p>
            <p id="modalEventDate" class="text-blue-500"></p>
            <p id="modalEventStartEndTime" class="text-sm text-gray-500"></p>
            <p id="modalEventLocation" class="text-sm text-gray-500"></p>

            <!-- Registration Link (Only show if available) -->
            <div id="registerButtonContainer" class="mt-4">
                <a href="" id="registerButton" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700" target="_blank">Register</a>
            </div>
        </div>

        <!-- Event Poster Area -->
        <div class="flex-shrink-0">
            <a href="" id="eventPosterLink" target="_blank">
                <img id="modalEventPoster" src="" alt="Event Poster" class="w-48 h-64 object-cover rounded-lg">
            </a>
        </div>
    </div>
</div>
    <!-- JavaScript for Profile Dropdown, Events Loading, and Modal -->
    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const profileButton = document.getElementById('profileButton');
            const profileDropdown = document.getElementById('profileDropdown');
            const eventModal = document.getElementById('eventModal');
            const closeModal = document.getElementById('closeModal');
            const happeningNowContainer = document.getElementById('happening-now-container');
            const happeningNowBanner = document.getElementById('happeningNowBanner');
            const happeningNowName = document.getElementById('happeningNowName');
            const happeningNowDepartment = document.getElementById('happeningNowDepartment');
            const happeningNowDescription = document.getElementById('happeningNowDescription');
            const happeningNowTime = document.getElementById('happeningNowTime');
            const happeningNowLocation = document.getElementById('happeningNowLocation');
            const upcomingEventsContainer = document.getElementById('upcoming-events-container');
            const pastEventsContainer = document.getElementById('past-events-container');
        
            sessionStorage.clear();
        
            // Toggle Profile Dropdown
            profileButton.addEventListener('click', (event) => {
                event.stopPropagation();
                profileDropdown.classList.toggle('hidden');
            });
        
            document.addEventListener('click', (event) => {
                if (!profileDropdown.classList.contains('hidden') && !profileDropdown.contains(event.target) && event.target !== profileButton) {
                    profileDropdown.classList.add('hidden');
                }
            });
        
            // Close Modal
            closeModal.addEventListener('click', () => {
                eventModal.classList.add('hidden');
            });
        
            window.addEventListener('click', (event) => {
                if (event.target === eventModal) {
                    eventModal.classList.add('hidden');
                }
            });
        
            try {
                const response = await fetch('/api/dashboard/events');
                const events = await response.json();
                const currentDateUTC = new Date(Date.now());
                let isHappeningNow = false;
        
                events.forEach(event => {
                    const eventStartDate = new Date(event.startDate);
                    const eventEndDate = new Date(event.endDate);
        
                    // Check if the event is currently happening (today)
                    const eventStartDateWithoutTime = new Date(eventStartDate.setHours(0, 0, 0, 0)); // Strip time from event's start date
                    const currentDateWithoutTime = new Date(currentDateUTC.setHours(0, 0, 0, 0)); // Strip time from current date
        
                    if (!isHappeningNow && eventStartDateWithoutTime.getTime() === currentDateWithoutTime.getTime() &&
                        currentDateUTC >= eventStartDate && currentDateUTC <= eventEndDate) {
                        // Populate Happening Now section
                        happeningNowContainer.classList.remove('hidden');
                        happeningNowBanner.src = event.banner || 'https://via.placeholder.com/720x300';
                        happeningNowName.textContent = event.name;
                        happeningNowDepartment.textContent = event.department;
                        happeningNowDescription.textContent = event.description;
                        happeningNowTime.textContent = `Happening Today, From ${formatTimeTo12Hour(event.startTime)} to ${formatTimeTo12Hour(event.endTime)}`;

        
                        const venueMapping = {
                            1: "CS Lab1", 2: "CS Lab2", 3: "CS Lab3", 4: "CS Lab4", 5: "CS Lab5", 6: "CS Lab6",
                            7: "Auditorium", 8: "Seminar Hall", 9: "Conference Room", 10: "Prayer Hall", 11: "Library",
                            12: "Data Analytics Lab", 13: "CIR Seminar Hall"
                        };
                        happeningNowLocation.textContent = `Venue: ${venueMapping[event.venueId] || 'Unknown Venue'}`;
                        isHappeningNow = true;
                    }
        
                    // Populate Upcoming and Past Events sections
                    const eventCard = createEventCard(event);
                    if (eventStartDate >= currentDateUTC) {
                        upcomingEventsContainer.appendChild(eventCard);
                    } else if (eventEndDate < currentDateUTC) {
                        pastEventsContainer.appendChild(eventCard);
                    }
                });
        
                // Show message if no events are ongoing or upcoming
                if (!isHappeningNow) {
                    happeningNowContainer.innerHTML = '<p class="text-gray-500">No events are currently happening.</p>';
                }
            } catch (error) {
                console.error('Failed to load events:', error);
                document.getElementById('events-container').innerHTML = '<p class="text-red-500">Failed to load events.</p>';
            }
            function formatTimeTo12Hour(time24) {
                const [hour, minute] = time24.split(':');
                const hourInt = parseInt(hour, 10);
                const ampm = hourInt >= 12 ? 'PM' : 'AM';
                const hour12 = hourInt % 12 || 12; // Convert hour to 12-hour format
                return `${hour12}:${minute} ${ampm}`;
            }
            
            function createEventCard(event) {
                const eventCard = document.createElement('div');
                eventCard.className = 'bg-white rounded-lg shadow-lg p-4';
        
                // Adjust the start date and time
                const eventStartDate = new Date(event.startDate);
                const startTimeParts = event.startTime.split(':');
                eventStartDate.setHours(startTimeParts[0], startTimeParts[1], 0, 0);  // Set hours and minutes from startTime
                
                const formattedDate = eventStartDate.toISOString().split('T')[0];
                const formattedTime = event.startTime.slice(0, 5);
        
                let eventStatus = '';
                let timeRemaining = '';
        
                const currentDateUTC = new Date(Date.now());
        
                // If the event has not started yet
                if (eventStartDate > currentDateUTC) {
                    const timeDiff = eventStartDate - currentDateUTC;
                    const daysRemaining = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
                    const hoursRemaining = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutesRemaining = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
                    timeRemaining = `${daysRemaining} days, ${hoursRemaining} hours, ${minutesRemaining} minutes remaining`;
                    eventStatus = 'Upcoming';
                } 
                // If the event is currently happening
                else if (currentDateUTC >= eventStartDate && currentDateUTC <= new Date(event.endDate)) {
                    eventStatus = 'Happening Now';
                } 
                // If the event has ended
                else {
                    eventStatus = 'Event Ended';
                }
        
                eventCard.innerHTML = `
                    <img src="${event.banner || 'https://via.placeholder.com/720x300'}" alt="Event Banner" class="w-full h-40 object-cover rounded-t-lg">
                    <div class="mt-4">
                        <h3 class="text-lg font-bold text-gray-800">${event.name}</h3>
                        <p class="text-sm text-blue-500 mt-2">${formattedDate} at ${formattedTime}</p>
                        <p class="text-sm text-gray-500">${eventStatus}</p>
                        <p class="text-sm text-gray-500">${timeRemaining}</p>
                    </div>
                `;
                eventCard.addEventListener('click', () => showModal(event, eventStartDate, eventStatus));
                return eventCard;
            }
        
            function showModal(event, eventStartDate, eventStatus) {
                const venueMapping = {
                    1: "CS Lab1", 2: "CS Lab2", 3: "CS Lab3", 4: "CS Lab4", 5: "CS Lab5", 6: "CS Lab6",
                    7: "Auditorium", 8: "Seminar Hall", 9: "Conference Room", 10: "Prayer Hall", 11: "Library",
                    12: "Data Analytics Lab", 13: "CIR Seminar Hall"
                };
            
                document.getElementById('modalEventName').textContent = event.name;
                document.getElementById('modalEventDescription').textContent = event.description;
                document.getElementById('modalEventDepartment').textContent = event.department;
                document.getElementById('registerButton').href = event.formLink;

                if (eventStatus === 'Event Ended'){
                    document.getElementById('registerButton').classList.add('hidden');
                } else {
                    document.getElementById('registerButton').classList.remove('hidden');
                }
                
                const startDate = new Date(event.startDate);
                const formattedStartDate = startDate.toISOString().split('T')[0];
                const formattedStartTime = formatTimeTo12Hour(event.startTime);
            
                const endDate = new Date(event.endDate);
                const formattedEndDate = endDate.toISOString().split('T')[0];
                const formattedEndTime = formatTimeTo12Hour(event.endTime);
            
                document.getElementById('modalEventDate').innerHTML = `
                    <p><strong>Start Date:</strong> ${formattedStartDate}</p>
                    <p><strong>Start Time:</strong> ${formattedStartTime}</p>
                    <p><strong>End Date:</strong> ${formattedEndDate}</p>
                    <p><strong>End Time:</strong> ${formattedEndTime}</p>
                `;
            
                document.getElementById('modalEventLocation').textContent = `Venue: ${venueMapping[event.venueId] || 'Unknown Venue'}`;
            
                const eventPosterPath = event.image || '/uploads/default-poster.png';
                const posterURL = new URL(eventPosterPath, window.location.origin); // Ensure absolute URL
            
                document.getElementById('modalEventPoster').setAttribute('src', posterURL.href);
                document.getElementById('eventPosterLink').setAttribute('href', posterURL.href);
            
                eventModal.classList.remove('hidden');
            }
            
        });        
    </script>         
</body>
</html>
