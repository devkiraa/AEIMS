<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Event Details</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }

        .form-container {
            max-width: 100%;
            margin: 0 auto;
        }

        .form-title {
            font-size: 2rem;
            font-weight: 600;
        }

        .form-label {
            color: #4B5563;
        }

        .radio-label {
            display: inline-flex;
            align-items: center;
            margin-right: 1.5rem;
        }

        .radio-label input {
            margin-right: 0.5rem;
        }

        .form-section {
            margin-bottom: 1.5rem;
        }

        .form-section2 {
            margin-bottom: 1rem;
        }

        .btn-primary {
            background-color: #3B82F6;
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 0.375rem;
            font-weight: 600;
        }

        .btn-secondary {
            background-color: #6B7280;
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 0.375rem;
            font-weight: 600;
        }

        #coordinator-search {
            display: none;
            margin-left: 1rem;
        }

        #guest-counter {
            display: none;
            margin-left: 1rem;
            width: 100px;
        }

        #volunteer-counter {
            display: none;
            margin-left: 1rem;
            width: 100px;
        }

        /* Next button styling similar to the Add Guest Details page */
        .next-btn {
            background-color: #2563EB; /* Tailwind blue-600 */
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 500;
            align-items: center;
            justify-content: center;
        }

        .next-btn:hover {
            background-color: #1D4ED8; /* Tailwind blue-700 */
        }

        /* Next button styling similar to the Add Guest Details page */
        .back-btn {
            background-color: #E5E7EB; /* Tailwind blue-600 */
            color: #374151;
            padding: 10px 20px;
            border-radius: 8px;
            display: flex;
            font-weight: 500;
            align-items: center;
            justify-content: center;
        }

        .back-btn:hover {
            background-color: #D1D5DB; /* Tailwind blue-700 */
        }

        #coordinator-search {
            display: none;
            margin-left: 1rem;
        }

        /* User list and selected user styles */
        #user-list {
            position: absolute;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 0.375rem;
            max-height: 200px;
            overflow-y: auto;
            width: 100%;
            display: none;
            z-index: 10;
        }

        #user-list li {
            padding: 0.5rem;
            cursor: pointer;
        }

        #user-list li:hover, .highlight {
            background-color: #f0f0f0;
        }

        .selected-users {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .selected-user {
            background-color: #e0f2fe;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .remove-user {
            cursor: pointer;
            color: #2563eb;
        }

        #event_description {
            height: 129px;
        }
    </style>
    <script>
        let users = []; // Declare users globally
        let searchBar; // Declare searchBar globally
        let userList; // Declare userList globally
        let highlightedIndex = -1; // Track the highlighted index in the user list

        const eventDetailsEncoded = '<%= eventdetails %>'; // This is the encoded string from the backend
        const eventDetailsDecoded = decodeHtmlEntities(eventDetailsEncoded); // Decode HTML entities
        let eventDetails;

        const venueMapping = {
            'cslb1': "CS Lab 1", 'cslb2': "CS Lab 2",
            'cslb3': "CS Lab 3", 'cslb4': "CS Lab 4", 'cslb5': "CS Lab 5", 'cslb6': "CS Lab 6",
            'audt': "Auditorium", 'semh': "Seminar Hall", 'confh': "Conference Room", 'prah': "Prayer Hall",
            'lib': "Library", 'dal': "Data Analytics Lab", 'cirsh': "CIR Seminar Hall"
        };

        const venueMappingId = {
            1: "CS Lab 1", 2: "CS Lab 2", 3: "CS Lab 3", 4: "CS Lab 4", 5: "CS Lab 5", 6: "CS Lab 6",
            7: "Auditorium", 8: "Seminar Hall", 9: "Conference Room", 10: "Prayer Hall", 11: "Library",
            12: "Data Analytics Lab", 13: "CIR Seminar Hall"
        };

        const venueMappingxId = {
            'cslb1': 1, 'cslb2': 2,
            'cslb3': 3, 'cslb4': 4, 'cslb5': 5, 'cslb6': 6,
            'audt': 7, 'semh': 8, 'confh': 9, 'prah': 10,
            'lib': 11, 'dal': 12, 'cirsh': 13
        };

        // Function to decode HTML entities
        function decodeHtmlEntities(str) {
            const txt = document.createElement("textarea");
            txt.innerHTML = str;
            return txt.value;
        }

        function formatDate(dateString) {
            const eventStartDate = new Date(dateString);
            eventStartDate.setTime(eventStartDate.getTime());
            const year = eventStartDate.getFullYear();
            const month = String(eventStartDate.getMonth() + 1).padStart(2, '0');
            const day = String(eventStartDate.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        async function checkAvailability(eventDetails) {
            const startDate = document.getElementById('start_date').value;
            const endDate = document.getElementById('end_date').value;
            const startTime = document.getElementById('start_time').value;
            const endTime = document.getElementById('end_time').value;

            if (!(startDate && endDate && startTime && endTime)) return;

            try {
                const response = await fetch('/api/check-availability', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ startDate, endDate, startTime, endTime }),
                });

                if (!response.ok) throw new Error('Failed to fetch venue availability');
                const venues = await response.json();
                updateVenues(venues, eventDetails);
            } catch (error) {
                console.error('Error fetching availability:', error);
            }
        }

        function handleInputChange(eventDetails) {
            const allFilled = ['start_date', 'end_date', 'start_time', 'end_time']
                .every((id) => document.getElementById(id).value);

            if (allFilled) checkAvailability(eventDetails);
            checkRequiredFields();
        }

        function updateVenues(venues, eventDetails) {
            const venueSelect = document.getElementById("venue");
            const selectedVenueName = venueMappingId[eventDetails[0].ven_id]; // Get the venue name from the ID
            const selectedVenueKey = Object.keys(venueMapping).find(
                key => venueMapping[key] === selectedVenueName
            ); // Find the corresponding key in venueMapping
            let selectedVenueFound = false;

            // Clear any existing options
            venueSelect.innerHTML = "";

            // Iterate over the venues object to add available venues
            for (const [venue, status] of Object.entries(venues)) {
                if (status === "available") {
                    const option = document.createElement("option");
                    option.value = venue;
                    option.textContent = venueMapping[venue] || venue;

                    // Check if this is the selected venue and mark it as selected
                    if (venue === selectedVenueKey) {
                        option.selected = true;
                        selectedVenueFound = true;
                    }

                    venueSelect.appendChild(option);
                }
            }

            // If the selected venue is missing, add it with blue text
            if (!selectedVenueFound && selectedVenueKey) {
                const missingOption = document.createElement("option");
                missingOption.value = selectedVenueKey; // Set the key as the value
                missingOption.textContent = selectedVenueName; // Display the mapped name
                missingOption.style.color = "blue"; // Set text color to blue
                missingOption.selected = true;
                venueSelect.appendChild(missingOption);
            }
        }

        // Check if all required fields are filled
        function checkRequiredFields() {
            const eventTitle = document.getElementById('event_title');
            const eventDescription = document.getElementById('event_description');
            const eventLink = document.getElementById('event_link');

            // Elements to check for file link or input presence
            const pfileLink = document.getElementById('poster-link');
            const bfileLink = document.getElementById('banner-link');
            const pfileInput = document.getElementById('event_poster');
            const bfileInput = document.getElementById('event_banner');
            const nextButton = document.querySelector('.next-btn');

            // Check if all required fields are filled, including either file link or file input
            const isPosterValid = pfileLink.style.display === 'flex' || pfileInput.files.length > 0;
            const isBannerValid = bfileLink.style.display === 'flex' || bfileInput.files.length > 0;

            // Check if all fields are valid
            if (eventTitle.value && eventDescription.value && eventLink.value && eventLink.value.length < 250 && isPosterValid && isBannerValid) {
                nextButton.classList.add('enabled');
                nextButton.classList.remove('disabled');
                nextButton.disabled = false;
            } else {
                nextButton.classList.remove('enabled');
                nextButton.classList.add('disabled');
                nextButton.disabled = true;
            }
        }
        
        document.addEventListener("DOMContentLoaded", async function() {
            // Attach event listeners for input fields to trigger availability check
            ['start_date', 'end_date', 'start_time', 'end_time', 'event_title'].forEach((id) => {
                document.getElementById(id).addEventListener('input', () => handleInputChange(eventDetails));
            });

            try {
                eventDetails = JSON.parse(eventDetailsDecoded); // Parse the JSON string
                // console.log(eventDetails[0]);
            } catch (error) {
                console.error("Error parsing JSON:", error);
                return; // Exit if JSON parsing fails
            }
            const coordinatorRadios = document.querySelectorAll('input[name="event_coordinators"]');
            coordinatorRadios.forEach(radio => {
                radio.addEventListener('change', toggleCoordinatorSearch);
            });

            const guestRadios = document.querySelectorAll('input[name="event_guests"]');
            guestRadios.forEach(radio => {
                radio.addEventListener('change', toggleGuestCounter);
            });

            const volunteerRadios = document.querySelectorAll('input[name="event_volunteers"]');
            volunteerRadios.forEach(radio => {
                radio.addEventListener('change', toggleVolunteerCounter);
            });

            // // Retrieve event data from sessionStorage
            // const eventData = JSON.parse(sessionStorage.getItem('eventData'));
            // if (!eventData) {
            //     // Redirect to the previous page if eventData is not found
            //     window.location.href = '/book-event';
            //     return;
            // }

            // Check if eventData exists
            if (eventDetails) {
                // Populate the fields with the retrieved data
                document.getElementById('event_title').value = eventDetails[0].evn_name;
                document.getElementById('event_description').value = eventDetails[0].evn_desc;
                document.getElementById('event_link').value = eventDetails[0].evn_form_link;
                document.getElementById('start_date').value = formatDate(eventDetails[0].event_sd);
                document.getElementById('end_date').value = formatDate(eventDetails[0].evn_ed);
                document.getElementById('start_time').value = eventDetails[0].evn_st;
                document.getElementById('end_time').value = eventDetails[0].event_et;
                document.getElementById('banner-filename').href = eventDetails[0].evn_banner;
                document.getElementById('poster-filename').href = eventDetails[0].event_poster;

                checkAvailability(eventDetails);

                if (eventDetails[0].evn_vol_cnt === 0) {
                    document.querySelector('input[name="event_volunteers"][value="no"]').checked = true;
                } else {
                    document.querySelector('input[name="event_volunteers"][value="yes"]').checked = true;
                    document.getElementById('volunteer-counter').value = eventDetails[0].evn_vol_cnt;
                    toggleVolunteerCounter();
                }

                if (eventDetails[0].evn_food === 0) {
                    document.querySelector('input[name="event_food"][value="no"]').checked = true;
                } else {
                    document.querySelector('input[name="event_food"][value="yes"]').checked = true;
                }

                if (eventDetails[0].guest_count === 0) {
                    document.querySelector('input[name="event_guests"][value="none"]').checked = true;
                } else if (eventDetails[0].guest_count === 1 ){
                    document.querySelector('input[name="event_guests"][value="single"]').checked = true;
                } else {
                    document.querySelector('input[name="event_guests"][value="multiple"]').checked = true;
                    document.getElementById('guest-counter').value = eventDetails[0].guest_count;
                }
            } else {
                console.error('No event data found in sessionStorage.');
            }

            function toggleCoordinatorSearch() {
                const multipleRadio = document.querySelector('input[name="event_coordinators"][value="multiple"]');
                const searchBar = document.getElementById("coordinator-search");

                if (multipleRadio.checked) {
                    searchBar.style.display = "inline-block";
                    searchBar.focus(); // Focus on the search bar when it appears
                } else {
                    searchBar.style.display = "none";
                }
            }

            searchBar = document.getElementById("coordinator-search");
            // searchBar.addEventListener('input', filterUsers);
            searchBar.addEventListener('input', debounce(filterUsers, 500)); // Debounce the filter function

            // Create a container for the user list
            const userListContainer = document.createElement('div');
            userListContainer.id = 'user-list-container';
            userListContainer.style.display = 'inline-block'; // Display inline-block to position the user list below the search bar

            userList = document.createElement('ul'); // Initialize userList here
            userList.id = 'user-list';
            userListContainer.appendChild(userList);

            // Insert the user list container after the search bar
            searchBar.parentNode.insertBefore(userListContainer, searchBar.nextSibling);

            // Fetch users initially and store them in a variable
            let users = await fetchUsers(); // Fetch users initially and store them

            // Show the user list when the search bar is visible
            searchBar.addEventListener('focus', () => {
                // Request focus on the search bar after a short delay
                setTimeout(() => searchBar.focus(), 10);
                userListContainer.style.display = 'inline-block';
            });

            searchBar.addEventListener('blur', () => {
                userListContainer.style.display = 'none';
            });

            // Add event listeners for keyboard navigation
            searchBar.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowDown') {
                    highlightedIndex++;
                    highlightUser ();
                } else if (e.key === 'ArrowUp') {
                    highlightedIndex--;
                    highlightUser ();
                } else if (e.key === 'Enter') {
                    selectUser ();
                }
            });

            // Declare searchBar here
            searchBar = document.getElementById("coordinator-search");

            // Insert the user list container after the search bar
            searchBar.parentNode.insertBefore(userListContainer, searchBar.nextSibling);

            // Show the user list when the search bar is visible
            searchBar.addEventListener('focus', () => {
                userListContainer.style.display = 'block';
            });

            searchBar.addEventListener('blur', () => {
                userListContainer.style.display = 'none';
            });

            // Add the event listener for input to filter users
            // searchBar.addEventListener('input', filterUsers);
            
            // Initial toggle states
            checkRequiredFields();
            toggleCoordinatorSearch();
            toggleGuestCounter();
            toggleVolunteerCounter();

            // Retrieve existing data from sessionStorage
            const existingData = JSON.parse(sessionStorage.getItem('eventData'));

            // Add event listeners to input fields to trigger checkRequiredFields
            const inputFields = [
                'event_title',
                'start_date',
                'end_date',
                'start_time',
                'end_time',
                'venue',
                'event_description',
                'event_poster',
                'event_banner',
                'event_link'
            ];

            inputFields.forEach(id => {
                const input = document.getElementById(id);
                if (input) {
                    input.addEventListener('input', checkRequiredFields);
                } else {
                    console.error(`Element with ID ${id} not found.`);
                }
            });

            // Handle the next button click event
            document.querySelector('.next-btn').addEventListener('click', async (event) => {
                event.preventDefault();

                // Gather form data
                const eventTitle = document.getElementById('event_title').value;
                const startDate = document.getElementById('start_date').value;
                const endDate = document.getElementById('end_date').value;
                const startTime = document.getElementById('start_time').value;
                const endTime = document.getElementById('end_time').value;
                const venue = document.getElementById('venue').value;
                const eventDescription = document.getElementById('event_description').value;
                const eventLink = document.getElementById('event_link').value;
                const volunteerCounter = parseInt(document.getElementById('volunteer-counter').value);
                const guestCounter = parseInt(document.getElementById('guest-counter').value);
                const eventBanner = document.getElementById('event_banner').files[0];
                const eventPoster = document.getElementById('event_poster').files[0];
                const pfileLink = document.getElementById('poster-link');
                const bfileLink = document.getElementById('banner-link');
                const pfileName = document.getElementById('poster-filename');
                const bfileName = document.getElementById('banner-filename');

                const vselectedOption = document.querySelector('input[name="event_volunteers"]:checked');
                const cselectedOption = document.querySelector('input[name="event_coordinators"]:checked');
                const gselectedOption = document.querySelector('input[name="event_guests"]:checked');
                const fselectedOption = document.querySelector('input[name="event_food"]:checked');

                // Define a lookup table for event configurations
                const eventConfigurations = {
                   'no_no': {
                        'none_single': { volunteerCount: 0, eventFood: 0, guestCount: 0,  },
                        'none_multiple': { volunteerCount: 0, eventFood: 0, guestCount: 0 },
                        'single_single': { volunteerCount: 0, eventFood: 0, guestCount: 1 },
                        'single_multiple': { volunteerCount: 0, eventFood: 0, guestCount: 1 },
                        'multiple_single': { volunteerCount: 0, eventFood: 0, guestCount: guestCounter },
                        'multiple_multiple': { volunteerCount: 0, eventFood: 0, guestCount: guestCounter }
                    },
                    'yes_yes': {
                        'none_single': { volunteerCount: volunteerCounter, eventFood: 1, guestCount: 0 },
                        'none_multiple': { volunteerCount: volunteerCounter, eventFood: 1, guestCount: 0 },
                        'single_single': { volunteerCount: volunteerCounter, eventFood: 1, guestCount: 1 },
                        'single_multiple': { volunteerCount: volunteerCounter, eventFood: 1, guestCount: 1 },
                        'multiple_single': { volunteerCount: volunteerCounter, eventFood: 1, guestCount: guestCounter },
                        'multiple_multiple': { volunteerCount: volunteerCounter, eventFood: 1, guestCount: guestCounter }
                    },
                    'yes_no': {
                        'none_single': { volunteerCount: volunteerCounter, eventFood: 0, guestCount: 0 },
                        'none_multiple': { volunteerCount: volunteerCounter, eventFood: 0, guestCount: 0 },
                        'single_single': { volunteerCount: volunteerCounter, eventFood: 0, guestCount: 1 },
                        'single_multiple': { volunteerCount: volunteerCounter, eventFood: 0, guestCount: 1 },
                        'multiple_single': { volunteerCount: volunteerCounter, eventFood: 0, guestCount: guestCounter },
                        'multiple_multiple': { volunteerCount: volunteerCounter, eventFood: 0, guestCount: guestCounter }
                    },
                    'no_yes': {
                        'none_single': { volunteerCount: 0, eventFood: 1, guestCount: 0 },
                        'none_multiple': { volunteerCount: 0, eventFood: 1, guestCount: 0 },
                        'single_single': { volunteerCount: 0, eventFood: 1, guestCount: 1 },
                        'single_multiple': { volunteerCount: 0, eventFood: 1, guestCount: 1 },
                        'multiple_single': { volunteerCount: 0, eventFood: 1, guestCount: guestCounter },
                        'multiple_multiple': { volunteerCount: 0, eventFood: 1, guestCount: guestCounter }
                    }
                };

                // Get the values from the selected options
                const vselected = vselectedOption.value;
                const fselected = fselectedOption.value;
                const gselected = gselectedOption.value;
                const cselected = cselectedOption.value;

                // Construct the keys for the lookup
                const key = `${vselected}_${fselected}`;
                const guestKey = `${gselected}_${cselected}`;

                // Check if the configuration exists
                if (eventConfigurations[key] && eventConfigurations[key][guestKey]) {
                    const { volunteerCount, eventFood, guestCount } = eventConfigurations[key][guestKey];

                    // Update the existing data with the new values
                    const updatedData = {
                        eventTitle,
                        eventDescription,
                        eventLink,
                        volunteerCount,
                        guestCount,
                        eventFood,
                        eventLink
                    };

                    const formData = new FormData();

                    if (pfileLink.style.display === 'flex' && bfileLink.style.display === 'flex') {
                        sessionStorage.setItem('editedEventDetails', JSON.stringify(updatedData));
                        sessionStorage.setItem('editedEventPosterUrl', pfileName.href);
                        sessionStorage.setItem('editedEventBannerUrl', bfileName.href);
                    } else if (pfileLink.style.display === 'flex' && eventBanner.files.length > 0) {
                        if (eventBanner) {
                            formData.append('eventBanner', eventBanner);
                        }

                        // Save the updated data to sessionStorage
                        sessionStorage.setItem('editedEventDetails', JSON.stringify(updatedData));
                        sessionStorage.setItem('eventPosterUrl', pfileName.href);

                        // Only send FormData if there are files to upload
                        if (formData.has('eventBanner')) {
                            try {
                                const response = await fetch('/api/upload-file/banner', { // Endpoint to handle file upload
                                    method: 'POST',
                                    body: formData
                                });

                                if (response.ok) {
                                    const result = await response.json(); // Get the response from the server
                                    const bannerUrl = result.eventBannerUrl; // Server returns eventBanner URL

                                    sessionStorage.setItem('editedEventBannerUrl', bannerUrl);
                                } else {
                                    console.error("Upload failed.");
                                }
                            } catch (error) {
                                console.error("Error uploading:", error);
                            }
                        }
                    } else if (eventPoster.files.length > 0 && bfileLink.style.display === 'flex') {
                        // Append files to FormData only if the upload option was visible (files are selected)
                        if (eventPoster) {
                            formData.append('eventPoster', eventPoster);
                        }

                        // Save the updated data to sessionStorage
                        sessionStorage.setItem('editedEventDetails', JSON.stringify(updatedData));
                        sessionStorage.setItem('eventBannerUrl', bfileName.href);

                        // Only send FormData if there are files to upload
                        if (formData.has('eventPoster')) {
                            try {
                                const response = await fetch('/api/upload-file/poster', { // Endpoint to handle file upload
                                    method: 'POST',
                                    body: formData
                                });

                                if (response.ok) {
                                    const result = await response.json(); // Get the response from the server
                                    const posterUrl = result.eventPosterUrl; // Server returns eventPoster URL

                                    // Store the URLs in sessionStorage
                                    sessionStorage.setItem('editedEventPosterUrl', posterUrl);
                                } else {
                                    console.error("Upload failed.");
                                }
                            } catch (error) {
                                console.error("Error uploading:", error);
                            }
                        }
                    } else if (eventPoster.files.length > 0 && eventBanner.files.length > 0) {
                        // Append files to FormData only if the upload option was visible (files are selected)
                        if (eventPoster) {
                            formData.append('eventPoster', eventPoster);
                        }
                        if (eventBanner) {
                            formData.append('eventBanner', eventBanner);
                        }

                        // Save the updated data to sessionStorage
                        sessionStorage.setItem('editedEventDetails', JSON.stringify(updatedData));

                        // Only send FormData if there are files to upload
                        if (formData.has('eventPoster') || formData.has('eventBanner')) {
                            try {
                                const response = await fetch('/api/upload-file', { // Endpoint to handle file upload
                                    method: 'POST',
                                    body: formData
                                });

                                if (response.ok) {
                                    const result = await response.json(); // Get the response from the server
                                    const posterUrl = result.eventPosterUrl; // Server returns eventPoster URL
                                    const bannerUrl = result.eventBannerUrl; // Server returns eventBanner URL

                                    // Store the URLs in sessionStorage
                                    sessionStorage.setItem('editedEventPosterUrl', posterUrl);
                                    sessionStorage.setItem('editedEventBannerUrl', bannerUrl);
                                } else {
                                    console.error("Upload failed.");
                                }
                            } catch (error) {
                                console.error("Error uploading:", error);
                            }
                        }
                    } else {
                        console.error("An unknown error occurred while handling files");
                        return;
                    }

                    // Redirect to the next page
                    if (eventConfigurations[key][guestKey].guestCount === 0) {
                        window.location.href = `/edit-event/resource/${eventDetails[0].evn_id}`;
                    } else {
                        window.location.href = `/edit-event/guest-details/${eventDetails[0].evn_id}`;
                    }
                } else {
                    console.error("Critical Value Error!");
                }
            });
        });

        function toggleGuestCounter() {
            const guestRadios = document.querySelectorAll('input[name="event_guests"]');
            const guestCounter = document.getElementById("guest-counter");

            guestRadios.forEach(radio => {
                if (radio.value === 'multiple' && radio.checked) {
                    guestCounter.style.display = "inline-block";
                } else if (radio.value !== 'multiple' && radio.checked) {
                    guestCounter.style.display = "none";
                }
            });
        }

        function toggleVolunteerCounter() {
            const volunteerRadios = document.querySelectorAll('input[name="event_volunteers"]');
            const volunteerCounter = document.getElementById("volunteer-counter");

            volunteerRadios.forEach(radio => {
                if (radio.value === 'yes' && radio.checked) {
                    volunteerCounter.style.display = "inline-block";
                } else if (radio.value === 'no' && radio.checked) {
                    volunteerCounter.style.display = "none";
                }
            });
        }

        async function fetchUsers() {
            try {
                const response = await fetch('/api/users');
                if (!response.ok) throw new Error('Failed to fetch users');
                const data = await response.json();
                users = data; // Assign to the global users variable
                return data; // Return the fetched users
            } catch (error) {
                console.error('Error fetching users:', error);
                return []; // Return an empty array on error
            }
        }

        function filterUsers() {
                const searchTerm = searchBar.value.toLowerCase();
                const filteredUsers = users.filter(user => user.usr_aname.toLowerCase().includes(searchTerm));

                userList.innerHTML = '';
                filteredUsers.forEach((user, index) => {
                    const listItem = document.createElement('li');
                    listItem.textContent = user.usr_aname;
                    listItem.className = index === highlightedIndex ? 'highlight' : '';
                    listItem.addEventListener('click', () => addUser(user));
                    userList.appendChild(listItem);
                });

                highlightedIndex = 0;
            }
        
            function addUser(user) {
                if (selectedUsers.some(selected => selected.usr_id === user.usr_id)) return;

                selectedUsers.push(user);
                const userElement = document.createElement('div');
                userElement.className = 'selected-user';
                userElement.textContent = user.usr_aname;

                const removeBtn = document.createElement('span');
                removeBtn.className = 'remove-user';
                removeBtn.textContent = '✕';
                removeBtn.addEventListener('click', () => removeUser(user, userElement));

                userElement.appendChild(removeBtn);
                selectedUsersContainer.appendChild(userElement);

                searchBar.value = '';
                userList.innerHTML = '';
            }

            function removeUser(user, userElement) {
                selectedUsers = selectedUsers.filter(selected => selected.usr_id !== user.usr_id);
                userElement.remove();
            }

            function navigateUserList(e) {
                const items = userList.getElementsByTagName('li');
                if (e.key === 'ArrowDown') {
                    highlightedIndex = (highlightedIndex + 1) % items.length;
                } else if (e.key === 'ArrowUp') {
                    highlightedIndex = (highlightedIndex - 1 + items.length) % items.length;
                } else if (e.key === 'Enter') {
                    if (items[highlightedIndex]) items[highlightedIndex].click();
                    return;
                }
                Array.from(items).forEach((item, idx) => item.classList.toggle('highlight', idx === highlightedIndex));
            }

            function highlightUser() {
                const userListItems = userList.children;
                if (highlightedIndex >= 0 && highlightedIndex < userListItems.length) {
                    for (let i = 0; i < userListItems.length; i++) {
                        userListItems[i].classList.remove('highlight');
                    }
                    userListItems[highlightedIndex].classList.add('highlight');
                }
            }

            function selectUser() {
                const highlightedItem = userList.children[highlightedIndex];
                if (highlightedItem) {
                    const selectedUser = users.find(user => user.usr_aname === highlightedItem.textContent);
                    if (selectedUser) {
                        // Handle the selected user (e.g., add to a list, display details, etc.)
                        searchBar.value = ''; // Clear the search input
                        highlightedIndex = -1; // Reset the highlighted index
                    }
                }
            }

            function debounce(func, wait) {
                let timeout;
                return function(...args) {
                    const context = this;
                    const later = function() {
                        timeout = null;
                        func.apply(context, args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

        function validateFile(chk) {
            const allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
            const fileInput = chk === 0 ? document.getElementById('event_banner') : document.getElementById('event_poster');
            const errorMessage = chk === 0 ? document.getElementById('banner-error') : document.getElementById('poster-error');
            const linkContainer = chk === 0 ? document.getElementById('banner-link') : document.getElementById('poster-link');
            const fileNameLink = chk === 0 ? document.getElementById('banner-filename') : document.getElementById('poster-filename');
            const filePath = fileInput.value;

            if (!allowedExtensions.exec(filePath)) {
                errorMessage.textContent = 'Please upload a file with .jpg, .jpeg, or .png extension.';
                errorMessage.classList.remove('hidden');
                fileInput.value = '';
                return false;
            }

            const file = fileInput.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const img = new Image();
                    img.src = e.target.result;
                    img.onload = function() {
                        const isValidDimension = (chk === 0 && img.width === 720 && img.height === 300) || (chk === 1 && img.width === 1080 && img.height === 1350);

                        if (!isValidDimension) {
                            errorMessage.textContent = chk === 0 ? 'Image must be 720x300 pixels.' : 'Image must be 1080x1350 pixels.';
                            errorMessage.classList.remove('hidden');
                            fileInput.value = '';
                        } else {
                            errorMessage.classList.add('hidden');

                            // Set hyperlink to the file blob URL and show filename
                            const fileURL = URL.createObjectURL(file);
                            fileNameLink.href = fileURL;
                            fileNameLink.textContent = file.name;

                            // Show link and hide file input
                            linkContainer.style.display = "flex";
                            fileInput.style.display = "none";
                            fileInput.disabled = true; // Disable the file input when hidden
                        }
                    };
                };
                reader.readAsDataURL(file);
            } else {
                console.log("No file selected");
            }
        }

            function removeFile(type) {
                const fileInput = document.getElementById(`event_${type}`);
                const linkContainer = document.getElementById(`${type}-link`);
                const errorMessage = document.getElementById(`${type}-error`);

                fileInput.value = ''; // Clear file input

                // Hide link preview and show file input
                linkContainer.style.display = "none";
                fileInput.style.display = "block";
                fileInput.disabled = false;
                errorMessage.classList.add('hidden'); // Hide error message if it was shown
                checkRequiredFields();
            }

            document.addEventListener('DOMContentLoaded', function () {
                const profileButton = document.getElementById('profileButton');
                const profileDropdown = document.getElementById('profileDropdown');
            
                // Toggle dropdown on button click
                profileButton.addEventListener('click', (event) => {
                    event.stopPropagation();
                    profileDropdown.classList.toggle('hidden');
                });
            
                // Close dropdown if clicked outside
                document.addEventListener('click', (event) => {
                    if (!profileDropdown.classList.contains('hidden') && !profileDropdown.contains(event.target) && event.target !== profileButton) {
                        profileDropdown.classList.add('hidden');
                    }
                });
            });        
    </script>
</head>
<body class="min-h-screen bg-gray-100">
    <!-- Navbar -->
    <nav class="bg-blue-600 p-4">
        <div class="container mx-auto flex justify-between items-center">
            <!-- Navbar Links -->
            <div class="flex items-center space-x-6">
                <ul class="flex space-x-6 text-white">
                    <!-- Home Link - Always First -->
                    <li><a href="/" class="hover:text-gray-300">Home</a></li>
            
                    <!-- Conditional Links for 'admin' or 'icts' -->
                    <% if (userRole === 'admin' || userRole === 'icts') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                        <li><a href="/inventory" class="hover:text-gray-300">Inventory</a></li>
                        <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                    <% } %>
            
                    <!-- Conditional Links for 'hod' -->
                    <% if (userRole === 'hod') { %>
                        <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                        <li><a href="/dept-events" class="hover:text-gray-300">Dept Events</a></li>
                        <li><a href="/event-approval" class="hover:text-gray-300">Approval</a></li>
                    <% } %>
            
                    <!-- Conditional Links for 'em' -->
                    <% if (userRole === 'em') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                    <% } %>
            
                    <!-- About Us Link - Always Last -->
                    <li><a href="/about-us" class="hover:text-gray-300">About Us</a></li>
                </ul>
            </div>         

            <!-- Profile Dropdown (Visible on Click) -->
            <div class="relative dropdown">
                <button class="bg-white rounded-full p-2" id="profileButton">
                    <img src="/assets/icons/avatar.svg" alt="User Icon" class="w-6 h-6">
                </button>
                <div class="dropdown-menu absolute hidden right-0 mt-2 w-48 bg-white rounded-lg shadow-lg" id="profileDropdown">
                    <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Profile</a>
                    <a href="/change-password" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Change Password</a>
                    <a href="/logout" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Logout</a>
                </div>
            </div>
        </div>
    </nav>

    <div class="bg-white w-full max-w-4xl p-8 lg:p-12 shadow-lg form-container mt-8">
        <div class="text-left mb-10">
            <h2 class="form-title">Edit Event Details</h2>
        </div>
        
        <!-- Update the form to use multipart/form-data for file uploads -->
        <form action="/events/create" method="POST" enctype="multipart/form-data">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div>
                    <div class="form-section">
                        <label for="event_title" class="form-label block">Event Title</label>
                        <input type="text" name="event_title" id="event_title" placeholder="Title" class="w-full p-2 border border-gray-300 rounded mt-1" required>
                    </div>

                    <div class="form-section">
                        <label for="venue" class="form-label block">Venue</label>
                        <select name="venue" id="venue" class="w-full p-2 border border-gray-300 rounded mt-1">
                            <!-- Venue Inserted Dynamically -->
                        </select>
                    </div>

                    <div class="form-section">
                        <label for="start_date" class="form-label block">Event Start Date</label>
                        <input type="date" name="start_date" id="start_date" class="w-full p-2 border border-gray-300 rounded mt-1" required>
                    </div>

                    <div class="form-section">
                        <label for="start_time" class="form-label block">Event Start Time</label>
                        <input type="time" name="start_time" id="start_time" class="w-full p-2 border border-gray-300 rounded mt-1" required>
                    </div>

                    <div class="form-section">
                        <label class="form-label block">Event Food</label>
                        <div class="flex h-10">
                            <label class="radio-label">
                                <input type="radio" name="event_food" value="yes">
                                Yes
                            </label>
                            <label class="radio-label">
                                <input type="radio" name="event_food" value="no" checked>
                                No
                            </label>
                        </div>
                    </div>

                    <div class="form-section">
                        <label class="form-label block">Event Volunteers</label>
                        <div class="flex h-11">
                            <label class="radio-label">
                                <input type="radio" name="event_volunteers" value="yes">
                                Yes
                            </label>
                            <label class="radio-label">
                                <input type="radio" name="event_volunteers" value="no" checked>
                                No
                            </label>
                            <input type="number" id="volunteer-counter" name="volunteer_counter" placeholder="Number of Volunteers" min="1" value="1" class="w-full p-2 border border-gray-300 rounded">
                        </div>
                    </div>

                    <div class="form-section">
                        <label class="form-label block">Event Guests</label>
                        <div class="flex h-11">
                            <label class="radio-label">
                                <input type="radio" name="event_guests" value="none" checked>
                                None
                            </label>
                            <label class="radio-label">
                                <input type="radio" name="event_guests" value="single">
                                Single
                            </label>
                            <label class="radio-label">
                                <input type="radio" name="event_guests" value="multiple">
                                Multiple
                            </label>
                            <input type="number" id="guest-counter" name="guest_counter" placeholder="Number of Guests" min="2" value="2" class="w-full p-2 border border-gray-300 rounded">
                        </div>
                    </div>

                    <div class="form-section hidden">
                        <label class="form-label block">Event Coordinators</label>
                        <div class="flex items-center h-10">
                            <label class="radio-label">
                                <input type="radio" name="event_coordinators" value="single" checked>
                                Single
                            </label>
                            <label class="radio-label">
                                <input type="radio" name="event_coordinators" value="multiple">
                                Multiple
                            </label>
                            <input type="text" id="coordinator-search" name="coordinator_search" placeholder="Search for Coordinators..." class="w-full p-2 border border-gray-300 rounded">
                        </div>
                        <div id="selected-users" class="selected-users"></div>
                    </div>
                </div>

                <div>
                    <div class="form-section">
                        <label for="event_description" class="form-label block">Event Description</label>
                        <textarea name="event_description" id="event_description" placeholder="Event description...." class="w-full h-36 p-2 border border-gray-300 rounded mt-1" required></textarea>
                    </div>

                    <div class="form-section">
                        <label for="end_date" class="form-label block">Event End Date</label>
                        <input type="date" name="end_date" id="end_date" class="w-full p-2 border border-gray-300 rounded mt-1" required>
                    </div>

                    <div class="form-section">
                        <label for="end_time" class="form-label block">Event End Time</label>
                        <input type="time" name="end_time" id="end_time" class="w-full p-2 border border-gray-300 rounded mt-1" required>
                    </div>
                    
                    <div class="form-section">
                        <label for="event_link" class="form-label block">Event Link</label>
                        <input type="text" name="event_link" id="event_link" placeholder="Registration form link" class="w-full p-2 border border-gray-300 rounded mt-1">
                        <span id="link-error" class="text-red-500 text-sm mt-1 hidden">Please shorten the URL.</span>
                    </div>


                    <!-- File upload for event banner -->
                    <div class="form-section">
                        <label for="event_banner" class="form-label block">
                            Event Banner <span class="text-xs">(dimensions: 720x300)</span>
                        </label>

                        <!-- Link preview shown by default -->
                        <div id="banner-link" class="items-center gap-2 mb-2" style="display: flex;">
                            <a href="" target="_blank" class="text-blue-500 underline" id="banner-filename">Event_Banner.jpg</a>
                        <button type="button" onclick="removeFile('banner')" class="text-red-500">&times;</button>
                        </div>

                        <!-- File input initially hidden -->
                        <input type="file" name="event_banner" id="event_banner" class="w-full p-2 border border-gray-300 rounded mt-1 disabled"
                            accept=".jpg, .jpeg, .png" onchange="validateFile(0)" style="display: none;" disabled>
                        <span id="banner-error" class="text-red-500 text-sm mt-1 hidden">Please upload a file with .jpg, .jpeg, or .png extension.</span>
                    </div>

                    <!-- File upload for event poster -->
                    <div class="form-section">
                        <label for="event_poster" class="form-label block">
                            Event Poster <span class="text-xs">(dimensions: 1080x1350)</span>
                    </label>

                        <!-- Link preview shown by default -->
                        <div id="poster-link" class="flex items-center gap-2 mb-2" style="display: flex;">
                            <a href="" target="_blank" class="text-blue-500 underline" id="poster-filename">Event_Poster.jpg</a>
                            <button type="button" onclick="removeFile('poster')" class="text-red-500">&times;</button>
                        </div>

                        <!-- File input initially hidden -->
                        <input type="file" name="event_poster" id="event_poster" class="w-full p-2 border border-gray-300 rounded mt-1 disabled"
                            accept=".jpg, .jpeg, .png" onchange="validateFile(1)" style="display: none;" disabled>
                        <span id="poster-error" class="text-red-500 text-sm mt-1 hidden">Please upload a file with .jpg, .jpeg, or .png extension.</span>
                    </div>
                </div>
            </div>
            
            <div class="flex justify-end mt-6">
                <!-- Keeping your buttons intact as per your original request -->
                <button type="button" class="back-btn mr-4 items-center" onclick="window.history.back()">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M7.707 9.293l5.146-5.146a.5.5 0 01.708.708L8.707 10l4.854 4.854a.5.5 0 01-.708.708l-5.146-5.146a.5.5 0 010-.708z" clip-rule="evenodd" />
                    </svg>
                    Back
                </button>
                <button type="submit" class="next-btn flex disabled" disabled>
                    Next
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M12.293 10.707l-5.146 5.146a.5.5 0 01-.708-.708L11.293 10 6.44 5.146a.5.5 0 01.708-.708l5.146 5.146a.5.5 0 010 .708z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        </form>
    </div>
</body>
</html>
