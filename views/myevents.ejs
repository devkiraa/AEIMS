<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Events</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        /* Popup Styles */
        .popup-overlay {
            background-color: rgba(0, 0, 0, 0.5);
        }
        .popup-content {
            position: relative;
        }
        .popup-close {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            cursor: pointer;
            font-size: 1.5rem;
            color: #4B5563;
            transition: color 0.3s;
        }
        .popup-close:hover {
            color: #EF4444;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="min-h-screen flex flex-col">
        <nav class="bg-blue-600 p-4">
            <div class="container mx-auto flex justify-between items-center">
                <!-- Navbar Links -->
                <div class="flex items-center space-x-6">
                    <ul class="flex space-x-6 text-white">
                        <!-- Home Link - Always First -->
                        <li><a href="/" class="hover:text-gray-300">Home</a></li>
                
                        <!-- Conditional Links for 'admin' or 'icts' -->
                        <% if (userRole === 'admin' || userRole === 'icts') { %>
                            <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                            <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                            <li><a href="/inventory" class="hover:text-gray-300">Inventory</a></li>
                            <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                        <% } %>
                
                        <!-- Conditional Links for 'hod' -->
                        <% if (userRole === 'hod') { %>
                            <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                            <li><a href="/dept-events" class="hover:text-gray-300">Dept Events</a></li>
                            <li><a href="/event-approval" class="hover:text-gray-300">Approval</a></li>
                        <% } %>
                
                        <!-- Conditional Links for 'em' -->
                        <% if (userRole === 'em') { %>
                            <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                            <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                        <% } %>
                
                        <!-- About Us Link - Always Last -->
                        <li><a href="/about-us" class="hover:text-gray-300">About Us</a></li>
                    </ul>
                </div>         
    
                <!-- Profile Dropdown (Visible on Click) -->
                <div class="relative dropdown">
                    <button class="bg-white rounded-full p-2" id="profileButton">
                        <img src="/assets/icons/avatar.svg" alt="User Icon" class="w-6 h-6">
                    </button>
                    <div class="dropdown-menu absolute hidden right-0 mt-2 w-48 bg-white rounded-lg shadow-lg" id="profileDropdown">
                        <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Profile</a>
                        <a href="/change-password" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Change Password</a>
                        <a href="/logout" class="block px-4 py-2 text-gray-700 hover:bg-gray-100" onclick="sessionStorage.clear()">Logout</a>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="flex-grow container mx-auto p-6 max-w-5xl">
            <h1 class="text-3xl font-bold mb-8">My Events</h1>

            <!-- Tabs for Upcoming and Completed Events -->
            <div class="mb-6">
                <ul class="flex divide-x divide-gray-300">
                    <li id="upcoming-tab" class="px-4 text-blue-600 hover:text-gray-700 cursor-pointer" onclick="switchTab('upcoming')">
                        Upcoming Events
                    </li>
                    <li id="completed-tab" class="px-4 text-gray-500 hover:text-gray-700 cursor-pointer" onclick="switchTab('completed')">
                        Completed Events
                    </li>
                </ul>
            </div>

            <!-- Upcoming Events Table -->
            <div id="upcoming" class="tab-content">
                <h2 class="text-xl font-semibold mb-4">Upcoming Events</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-300 rounded-lg">
                        <thead>
                            <tr class="bg-gray-100 text-gray-600 text-left">
                                <th class="p-4">Event Name</th>
                                <th class="p-4">Event Date</th>
                                <th class="p-4">Action</th>
                            </tr>
                        </thead>
                        <tbody id="upcomingEventTable">
                            <!-- Events will be populated dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Completed Events Table -->
            <div id="completed" class="tab-content hidden">
                <h2 class="text-xl font-semibold mb-4">Completed Events</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-300 rounded-lg">
                        <thead>
                            <tr class="bg-gray-100 text-gray-600 text-left">
                                <th class="p-4">Event Name</th>
                                <th class="p-4">Event Date</th>
                                <th class="p-4">Action</th>
                            </tr>
                        </thead>
                        <tbody id="completedEventTable">
                            <!-- Events will be populated dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <!-- Popup Modal for Editing Event -->
    <div id="eventPopup" class="fixed inset-0 hidden flex items-center justify-center popup-overlay">
        <div class="bg-white p-6 rounded-lg shadow-lg max-w-lg w-full popup-content">
            <span class="popup-close" onclick="closePopup()">&times;</span>
            <h2 class="text-xl font-semibold mb-4">Edit Event</h2>
            <div id="popupEventContent">
                <!-- Event editing form will be populated here -->
            </div>
            <div class="mt-4 text-right">
                <button onclick="updateEvent()" class="bg-blue-600 text-white px-4 py-2 rounded-lg">
                    Update
                </button>
                <button onclick="deleteEvent()" class="bg-red-600 text-white px-4 py-2 rounded-lg">
                    Delete
                </button>
                <button onclick="closePopup()" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg">
                    Cancel
                </button>
            </div>
        </div>
    </div>

    <script>
        // Fetch events and separate them by upcoming and completed
        async function fetchUserEvents() {
            try {
                const response = await fetch('/api/myevents');
                if (!response.ok) throw new Error("Failed to fetch events");
                
                const events = await response.json();
                console.log("Fetched events:", events); // Debugging line
        
                // Fetch coordinators for each event
                for (let event of events) {
                    const coordinatorResponse = await fetch(`/api/event-coordinators?evn_id=${event.evn_id}`);
                    const coordinators = await coordinatorResponse.json();
                    console.log(`Fetched coordinators for event ${event.evn_id}:`, coordinators); // Debugging line
        
                    event.coordinators = coordinators.map(coordinator => coordinator.usr_id);
                }
        
                const currentDate = new Date().toISOString().split('T')[0];
                const upcomingEvents = events.filter(event => event.event_sd >= currentDate);
                const completedEvents = events.filter(event => event.event_sd < currentDate);
        
                console.log("Upcoming events:", upcomingEvents); // Debugging line
                console.log("Completed events:", completedEvents); // Debugging line
        
                populateTable('upcomingEventTable', upcomingEvents);
                populateTable('completedEventTable', completedEvents);
            } catch (error) {
                console.error("Error fetching events:", error);
            }
        }
        

function populateTable(tableId, events) {
    const table = document.getElementById(tableId);
    table.innerHTML = ''; // Clear previous content

    if (events.length === 0) {
        table.innerHTML = '<tr><td colspan="3" class="p-4 text-center text-gray-500">No events found</td></tr>';
        return;
    }

    events.forEach(event => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td class="p-4">${event.evn_name}</td>
            <td class="p-4">${event.event_sd}</td>
            <td class="p-4">
                <button onclick="openPopup(${event.evn_id}, '${event.evn_name}', '${event.event_sd}', '${event.coordinators}')" class="text-blue-600 hover:text-blue-800">Edit</button>
            </td>
        `;
        table.appendChild(row);
    });
}


// Open popup for editing an event
function openPopup(evn_id, evn_name, event_sd, coordinators) {
    document.getElementById('popupEventContent').innerHTML = `
        <p><strong>Event Name:</strong> ${evn_name}</p>
        <p><strong>Event Date:</strong> ${event_sd}</p>
        <p><strong>Coordinators:</strong> ${coordinators}</p>
    `;
    document.getElementById('eventPopup').classList.remove('hidden');
}

// Close popup
function closePopup() {
    document.getElementById('eventPopup').classList.add('hidden');
}

// Dummy functions for edit/delete actions
function updateEvent() {
    alert("Event updated successfully.");
    closePopup();
}

function deleteEvent() {
    alert("Event deleted successfully.");
    closePopup();
}

// Initialize events on page load
document.addEventListener('DOMContentLoaded', fetchUserEvents);

    </script>
</body>
</html>
