<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Events</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        /* Popup Styles */
        .popup-overlay {
            background-color: rgba(0, 0, 0, 0.5);
        }
        .popup-content {
            position: relative;
        }
        .popup-close {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            cursor: pointer;
            font-size: 1.5rem;
            color: #4B5563;
            transition: color 0.3s;
        }
        .popup-close:hover {
            color: #EF4444;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="min-h-screen flex flex-col">
        <nav class="bg-blue-600 p-4">
            <div class="container mx-auto flex justify-between items-center">
                <!-- Navbar Links -->
                <div class="flex items-center space-x-6">
                    <ul class="flex space-x-6 text-white">
                        <!-- Home Link - Always First -->
                        <li><a href="/" class="hover:text-gray-300">Home</a></li>
                
                        <!-- Conditional Links for 'admin' or 'icts' -->
                        <% if (userRole === 'admin' || userRole === 'icts') { %>
                            <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                            <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                            <li><a href="/inventory" class="hover:text-gray-300">Inventory</a></li>
                            <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                        <% } %>
                
                        <!-- Conditional Links for 'hod' -->
                        <% if (userRole === 'hod') { %>
                            <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                            <li><a href="/dept-events" class="hover:text-gray-300">Dept Events</a></li>
                            <li><a href="/event-approval" class="hover:text-gray-300">Approval</a></li>
                        <% } %>
                
                        <!-- Conditional Links for 'em' -->
                        <% if (userRole === 'em') { %>
                            <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                            <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                        <% } %>
                
                        <!-- About Us Link - Always Last -->
                        <li><a href="/about-us" class="hover:text-gray-300">About Us</a></li>
                    </ul>
                </div>         
    
                <div class="relative dropdown">
                    <button class="bg-white rounded-full p-2" id="profileButton">
                        <img src="/assets/icons/avatar.svg" alt="User Icon" class="w-6 h-6">
                    </button>
                    <div class="dropdown-menu absolute hidden right-0 mt-2 w-48 bg-white rounded-lg shadow-lg" id="profileDropdown">
                        <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Profile</a>
                        <a href="/change-password" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Change Password</a>
                        <a href="/logout" class="block px-4 py-2 text-gray-700 hover:bg-gray-100" onclick="sessionStorage.clear()">Logout</a>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="flex-grow container mx-auto p-6 max-w-5xl">
            <h1 class="text-3xl font-bold mb-8">My Events</h1>

            <!-- Tabs for Upcoming and Completed Events -->
            <div class="mb-6">
                <ul class="flex divide-x divide-gray-300">
                    <li id="upcoming-tab" class="px-4 text-blue-600 hover:text-gray-700 cursor-pointer" onclick="switchTab('upcoming')">
                        Upcoming Events
                    </li>
                    <li id="completed-tab" class="px-4 text-gray-500 hover:text-gray-700 cursor-pointer" onclick="switchTab('completed')">
                        Completed Events
                    </li>
                </ul>
            </div>

           <!-- Upcoming Events Table -->
           <div id="upcoming" class="tab-content">
            <h2 class="text-xl font-semibold mb-4">Upcoming Events</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white border border-gray-300 rounded-lg">
                    <thead>
                        <tr class="bg-gray-100 text-gray-600 text-left">
                            <th class="p-4">Event Name</th>
                            <th class="p-4">Event Date</th>
                            <th class="p-4">Start Time</th>
                            <th class="p-4">Action</th>
                        </tr>
                    </thead>
                    <tbody id="upcomingEventTable">
                        <!-- Events will be populated dynamically -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Completed Events Table -->
        <div id="completed" class="tab-content hidden">
            <h2 class="text-xl font-semibold mb-4">Completed Events</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white border border-gray-300 rounded-lg">
                    <thead>
                        <tr class="bg-gray-100 text-gray-600 text-left">
                            <th class="p-4">Event Name</th>
                            <th class="p-4">Event Date</th>
                            <th class="p-4">Start Time</th>
                            <th class="p-4">Action</th>
                        </tr>
                    </thead>
                    <tbody id="completedEventTable">
                        <!-- Events will be populated dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
        </main>
    </div>

    <!-- Popup Modal for Editing Event -->
    <div id="eventPopup" class="fixed inset-0 hidden flex items-center justify-center popup-overlay">
        <div class="bg-white p-6 rounded-lg shadow-lg max-w-lg w-full popup-content">
            <span class="popup-close" onclick="closePopup()">&times;</span>
            <h2 class="text-xl font-semibold mb-4">Edit Event</h2>
            <div id="popupEventContent">
                <!-- Event editing form will be populated here -->
            </div>
            <div class="mt-4 text-right">
                <button onclick="updateEvent()" class="bg-blue-600 text-white px-4 py-2 rounded-lg">
                    Update
                </button>
                <button onclick="deleteEvent()" class="bg-red-600 text-white px-4 py-2 rounded-lg">
                    Delete
                </button>
                <button onclick="closePopup()" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg">
                    Cancel
                </button>
            </div>
        </div>
    </div>

    <script>

        // Profile Dropdown Toggle
        const profileButton = document.getElementById('profileButton');
        const profileDropdown = document.getElementById('profileDropdown');

        profileButton.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent click from triggering document click listener
            profileDropdown.classList.toggle('hidden');
        });

        // Close dropdown if clicked outside
        document.addEventListener('click', (event) => {
            if (!profileButton.contains(event.target) && !profileDropdown.contains(event.target)) {
                profileDropdown.classList.add('hidden');
            }
        });

        // Fetch events and separate them by upcoming and completed
        async function fetchUserEvents() {
            try {
                const response = await fetch('/api/myevents');
                if (!response.ok) throw new Error("Failed to fetch events");
                
                const events = await response.json();
                console.log("Fetched events:", events); // Debugging line
        
                // Fetch coordinators for each event
                for (let event of events) {
                    const coordinatorResponse = await fetch(`/api/event-coordinators?evn_id=${event.evn_id}`);
                    const coordinators = await coordinatorResponse.json();
                    console.log(`Fetched coordinators for event ${event.evn_id}:`, coordinators); // Debugging line
        
                    event.coordinators = coordinators.map(coordinator => coordinator.usr_id);
                    
                }
        
                const currentDate = new Date().toISOString().split('T')[0];
                const upcomingEvents = events.filter(event => event.event_sd >= currentDate);
                const completedEvents = events.filter(event => event.event_sd < currentDate);
                populateEventTable(upcomingEvents, 'upcomingEventTable');
                populateEventTable(completedEvents, 'completedEventTable');
            } catch (error) {
                console.error("Error fetching events:", error);
            }
        }
        
        // Populate Event Table
        function populateEventTable(events, tableId) {
            const tableBody = document.getElementById(tableId);
            tableBody.innerHTML = ''; // Clear existing content
        
            events.forEach(event => {
                const row = document.createElement('tr');
                row.classList.add('border-t', 'border-gray-200');
        
                row.innerHTML = `
                    <td class="p-4">${event.evn_name}</td>
                    <td class="p-4">${event.event_sd}</td>
                    <td class="p-4">${event.event_et}</td>
                    <td class="p-4">
                        <button class="text-blue-600 hover:text-blue-800" onclick="editEvent(${event.evn_id})">Edit</button>
                    </td>
                `;
        
                tableBody.appendChild(row);
            });
        }
        
        // Switch between upcoming and completed tabs
        function switchTab(tab) {
            const upcomingTab = document.getElementById('upcoming');
            const completedTab = document.getElementById('completed');
            const upcomingTabButton = document.getElementById('upcoming-tab');
            const completedTabButton = document.getElementById('completed-tab');
        
            if (tab === 'upcoming') {
                upcomingTab.classList.remove('hidden');
                completedTab.classList.add('hidden');
                upcomingTabButton.classList.add('text-blue-600', 'hover:text-gray-700');
                completedTabButton.classList.remove('text-blue-600');
                completedTabButton.classList.add('text-gray-500');
            } else {
                completedTab.classList.remove('hidden');
                upcomingTab.classList.add('hidden');
                completedTabButton.classList.add('text-blue-600', 'hover:text-gray-700');
                upcomingTabButton.classList.remove('text-blue-600');
                upcomingTabButton.classList.add('text-gray-500');
            }
        }
        
        // Store the current event's data for editing
let currentEventData = null;

function editEvent(evn_id) {
    // Fetch event details for the selected event
    fetch(`/api/event/${evn_id}`)
        .then(response => response.json())
        .then(event => {
            currentEventData = event; // Store current event data

            // Populate popup with event data
            document.getElementById('popupEventContent').innerHTML = `
                <label class="block mb-2 text-gray-700">Event Name:</label>
                <input type="text" id="eventName" class="w-full p-2 border border-gray-300 rounded-lg mb-4" value="${event.evn_name}" />
                
                <label class="block mb-2 text-gray-700">Event Date:</label>
                <input type="date" id="eventDate" class="w-full p-2 border border-gray-300 rounded-lg mb-4" value="${event.event_sd}" />
                
                <label class="block mb-2 text-gray-700">Start Time:</label>
                <input type="time" id="startTime" class="w-full p-2 border border-gray-300 rounded-lg mb-4" value="${event.event_st}" />
                
                <label class="block mb-2 text-gray-700">End Time:</label>
                <input type="time" id="endTime" class="w-full p-2 border border-gray-300 rounded-lg mb-4" value="${event.event_et}" />
            `;

            // Display the popup modal
            document.getElementById('eventPopup').classList.remove('hidden');
        })
        .catch(error => {
            console.error("Error fetching event details:", error);
        });
}
        
        // Update Event
        function updateEvent() {
            console.log('Event updated!');
        }
        
        // Delete Event
        function deleteEvent() {
            console.log('Event deleted!');
        }
        
        // Close Popup
        function closePopup() {
            document.getElementById('eventPopup').classList.add('hidden');
        }
        
        // Initial Fetch of Events
        fetchUserEvents();
    </script>
    
