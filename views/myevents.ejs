<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Events</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="min-h-screen flex flex-col">
        <!-- Navbar -->
        <nav class="bg-blue-600 p-4">
            <div class="container mx-auto flex justify-between items-center">
                <!-- Navbar Links -->
                <div class="flex items-center space-x-6">
                    <ul class="flex space-x-6 text-white">
                        <li><a href="/" class="hover:text-gray-300">Home</a></li>
                        <% if (userRole === 'admin' || userRole === 'icts') { %>
                            <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                            <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                            <li><a href="/inventory" class="hover:text-gray-300">Inventory</a></li>
                            <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                        <% } %>
                        <% if (userRole === 'hod') { %>
                            <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                            <li><a href="/dept-events" class="hover:text-gray-300">Dept Events</a></li>
                            <li><a href="/event-approval" class="hover:text-gray-300">Approval</a></li>
                        <% } %>
                        <% if (userRole === 'em') { %>
                            <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                            <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                        <% } %>
                        <li><a href="/about-us" class="hover:text-gray-300">About Us</a></li>
                    </ul>
                </div>         

                <div class="relative dropdown">
                    <button class="bg-white rounded-full p-2" id="profileButton">
                        <img src="/assets/icons/avatar.svg" alt="User Icon" class="w-6 h-6">
                    </button>
                    <div class="dropdown-menu absolute hidden right-0 mt-2 w-48 bg-white rounded-lg shadow-lg" id="profileDropdown">
                        <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Profile</a>
                        <a href="/change-password" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Change Password</a>
                        <a href="/logout" class="block px-4 py-2 text-gray-700 hover:bg-gray-100" onclick="sessionStorage.clear()">Logout</a>
                    </div>
                </div>
            </div>  
        </nav>

         <!-- Main Content -->
         <main class="flex-grow container mx-auto p-6 max-w-5xl">
            <h1 class="text-3xl font-bold mb-8">My Events</h1>

            <!-- Tabs -->
            <div class="flex justify-between items-center mb-6">
                <ul class="flex divide-x divide-gray-300">
                    <li id="upcoming-tab" class="px-4 text-blue-600 hover:text-gray-700 cursor-pointer" onclick="switchTab('upcoming')">
                        Upcoming Events
                    </li>
                    <li id="completed-tab" class="px-4 text-gray-500 hover:text-gray-700 cursor-pointer" onclick="switchTab('completed')">
                        Completed Events
                    </li>
                    <li id="quick-tab" class="px-4 text-gray-500 hover:text-gray-700 cursor-pointer" onclick="switchTab('quick')">
                        Quick Events
                    </li>
                </ul>
            </div>

            <!-- Upcoming Events Table -->
            <div id="upcoming" class="tab-content">
                <h2 class="text-xl font-semibold mb-4">Upcoming Events</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-300 rounded-lg">
                        <thead>
                            <tr class="bg-gray-100 text-gray-600 text-left">
                                <th class="p-4">Event Name</th>
                                <th class="p-4">Event Date</th>
                                <th class="p-4">Start Time</th>
                                <th class="p-4">Approval Status</th>
                                <th class="p-4">Action</th>
                            </tr>
                        </thead>
                        <tbody id="upcomingEventTable">
                            <!-- Events populated dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Completed Events Table -->
            <div id="completed" class="tab-content hidden">
                <h2 class="text-xl font-semibold mb-4">Completed Events</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-300 rounded-lg">
                        <thead>
                            <tr class="bg-gray-100 text-gray-600 text-left">
                                <th class="p-4">Event Name</th>
                                <th class="p-4">Event Date</th>
                                <th class="p-4">Start Time</th>
                                <th class="p-4">Approval Status</th>
                            </tr>
                        </thead>
                        <tbody id="completedEventTable">
                            <!-- Events populated dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Quick Events Table -->
<div id="quick" class="tab-content hidden">
    <h2 class="text-xl font-semibold mb-4">Quick Events</h2>
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-300 rounded-lg">
            <thead>
                <tr class="bg-gray-100 text-gray-600 text-left">
                    <th class="p-4">Event Name</th>
                    <th class="p-4">Event Date</th>
                    <th class="p-4">Start Time</th> <!-- Added Start Time Column -->
                    <th class="p-4">Action</th>
                </tr>
            </thead>
            <tbody id="quickEventTable">
                <!-- Events populated dynamically -->
            </tbody>
        </table>
    </div>
</div>

        </main>
    </div>
    <!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
        <h2 class="text-lg font-semibold text-gray-800 mb-4">Are you sure?</h2>
        <p class="text-gray-600 mb-6">This action cannot be undone. Do you want to proceed?</p>
        <div class="flex justify-end space-x-4">
            <button id="cancelDelete" class="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">
                Cancel
            </button>
            <button id="confirmDelete" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                Delete
            </button>
        </div>
    </div>
</div>

    <script>
        // Profile Dropdown Toggle
        const profileButton = document.getElementById('profileButton');
        const profileDropdown = document.getElementById('profileDropdown');

        profileButton.addEventListener('click', (event) => {
            event.stopPropagation();
            profileDropdown.classList.toggle('hidden');
        });

        document.addEventListener('click', (event) => {
            if (!profileButton.contains(event.target) && !profileDropdown.contains(event.target)) {
                profileDropdown.classList.add('hidden');
            }
        });

        // Helper function to format dates
        function formatDate(dateString) {
            const date = new Date(dateString);
            date.setTime(date.getTime() + 86400000); // Adjust for timezone offset
            const day = String(date.getDate()).padStart(2, '0'); // Ensure two digits
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based
            const year = date.getFullYear();
            return `${day}-${month}-${year}`; // Format as DD-MM-YYYY
        }
      
        async function fetchUserEvents() {
        try {
            document.getElementById('upcomingEventTable').innerHTML = "<tr><td colspan='4'>Loading...</td></tr>";
            document.getElementById('completedEventTable').innerHTML = "<tr><td colspan='3'>Loading...</td></tr>";
            document.getElementById('quickEventTable').innerHTML = "<tr><td colspan='3'>Loading...</td></tr>";

            const [eventsResponse, quickEventsResponse] = await Promise.all([
                fetch('/api/myevents'),
                fetch('/api/quick-events')
            ]);

            if (!eventsResponse.ok || !quickEventsResponse.ok) {
                throw new Error("Failed to fetch events");
            }

            const events = await eventsResponse.json();
            const quickEvents = await quickEventsResponse.json();
            
            const currentDate = new Date().toISOString().split('T')[0];
            const filteredEvents = events.filter(event => event.evn_stat !== 0); // Exclude inactive events

            const upcomingEvents = filteredEvents.filter(event => formatDate(event.event_sd) >= currentDate);
            const completedEvents = filteredEvents.filter(event => 
                formatDate(event.event_sd) < currentDate && event.evn_approval === 1 // Only approved events in Completed
            );

            populateEventTable(upcomingEvents, 'upcomingEventTable', true);
            populateEventTable(completedEvents, 'completedEventTable', false);

            // Populate Quick Events Table
            const activeQuickEvents = quickEvents.filter(qe => qe.qck_stat === 0);
            populateQuickEventTable(activeQuickEvents, 'quickEventTable');
        } catch (error) {
            console.error("Error fetching events:", error);
            document.getElementById('upcomingEventTable').innerHTML = "<tr><td colspan='4'>Error loading events.</td></tr>";
            document.getElementById('completedEventTable').innerHTML = "<tr><td colspan='3'>Error loading events.</td></tr>";
            document.getElementById('quickEventTable').innerHTML = "<tr><td colspan='3'>Error loading events.</td></tr>";
        }
    }       
        
        async function deleteEvent(eventId) {
            const isConfirmed = confirm("Are you sure you want to delete this event?");
            if (!isConfirmed) return; // Exit if user cancels the action
        
            try {
                const response = await fetch(`/api/delete-event/${eventId}`, { method: 'DELETE' });
                if (!response.ok) throw new Error("Failed to delete event");
                fetchUserEvents(); // Refresh the events list
            } catch (error) {
                console.error("Error deleting event:", error);
                alert("Failed to delete event.");
            }
        }
        
                

        function populateEventTable(events, tableId, showActions) {
            const tableBody = document.getElementById(tableId);
            tableBody.innerHTML = '';
    
            if (events.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="${showActions ? 4 : 3}">No events found.</td></tr>`;
                return;
            }
    
            events.forEach(event => {
                const row = document.createElement('tr');
                row.classList.add('border-t', 'border-gray-200');
    
                row.innerHTML = `
                    <td class="p-4">${event.evn_name}</td>
                    <td class="p-4">${formatDate(event.event_sd)}</td>
                    <td class="p-4">${event.evn_st}</td>
                    <td class="p-4">
                        ${event.evn_approval === 1 
                            ? 'Approved' 
                            : event.evn_approval === 0 
                            ? 'Pending' 
                            : ' Rejected'}
                    </td>
                    ${showActions ? `
                    <td class="p-4">
                        <button class="text-blue-600 hover:text-blue-800" onclick="editEvent(${event.evn_id})">
                            <img src="/assets/icons/edit_24dp_6B7280_FILL0_wght500_GRAD0_opsz24.svg" alt="edit" class="w-6 h-6">
                        </button>
                        <button class="text-red-600 hover:text-red-800 ml-2" onclick="deleteEvent(${event.evn_id})">
                            <img src="/assets/icons/delete_24dp_6B7280_FILL0_wght500_GRAD0_opsz24.svg" alt="delete" class="w-6 h-6">
                        </button>
                    </td>` : ''}
                `;
                
                tableBody.appendChild(row);
            });
        }
        function populateQuickEventTable(quickEvents, tableId) {
            const tableBody = document.getElementById(tableId);
            tableBody.innerHTML = '';
    
            if (quickEvents.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="4">No quick events found.</td></tr>`; // Updated colspan
                return;
            }
    
            quickEvents.forEach(event => {
                const row = document.createElement('tr');
                row.classList.add('border-t', 'border-gray-200');
                
                row.innerHTML = `
                    <td class="p-4">${event.evn_qk_name}</td>
                    <td class="p-4">${formatDate(event.evn_qk_sd)}</td>
                    <td class="p-4">${event.evn_qk_st || 'N/A'}</td>
                    <td class="p-4">
                        <button class="text-green-600 hover:text-green-800" onclick="upgradeQuickEvent(${event.evn_qk_id})">
                            <img src="/assets/icons/upgrade_24dp_6B7280_FILL0_wght500_GRAD0_opsz24.svg" alt="upgrade" class="w-6 h-6">
                        </button>
                        <button class="text-red-600 hover:text-red-800 ml-2" onclick="showDeleteModal(${event.evn_qk_id})">
                            <img src="/assets/icons/delete_24dp_6B7280_FILL0_wght500_GRAD0_opsz24.svg" alt="delete" class="w-6 h-6">
                        </button>
                    </td>
                `;
    
                tableBody.appendChild(row);
            });
        }        
        async function upgradeQuickEvent(quickEventId) {
            const evnId = prompt("Enter the full event ID to associate with this quick event:");
            if (!evnId) return;
        
            try {
                const response = await fetch(`/api/quick-events/${quickEventId}/upgrade`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ evn_id: evnId })
                });
        
                if (!response.ok) throw new Error("Failed to upgrade quick event");
                alert("Quick event upgraded successfully");
                fetchUserEvents();
            } catch (error) {
                console.error("Error upgrading quick event:", error);
                alert("Failed to upgrade quick event.");
            }
        }
        async function deleteQuickEvent(quickEventId) {
            if (!confirm("Are you sure you want to delete this quick event? This action cannot be undone.")) return;
        
            try {
                const response = await fetch(`/api/quick-events/${quickEventId}/delete`, {
                    method: 'DELETE',
                });
        
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Failed to delete quick event");
                }
                fetchUserEvents(); // Refresh the quick events table after deletion
            } catch (error) {
                console.error("Error deleting quick event:", error);
                alert(error.message || "Failed to delete quick event.");
            }
        }

        function switchTab(tab) {
            document.getElementById('upcoming').classList.toggle('hidden', tab !== 'upcoming');
            document.getElementById('completed').classList.toggle('hidden', tab !== 'completed');
            document.getElementById('quick').classList.toggle('hidden', tab !== 'quick');
        
            document.getElementById('upcoming-tab').classList.toggle('text-blue-600', tab === 'upcoming');
            document.getElementById('completed-tab').classList.toggle('text-blue-600', tab === 'completed');
            document.getElementById('quick-tab').classList.toggle('text-blue-600', tab === 'quick');
        }
     
        
        // Event Search Functionality
        function filterEvents() {
            const query = document.getElementById('searchEvent').value.toLowerCase();
            ['upcomingEventTable', 'completedEventTable'].forEach(tableId => {
                const rows = document.getElementById(tableId).rows;
                Array.from(rows).forEach(row => {
                    const eventName = row.cells[0]?.innerText.toLowerCase();
                    row.style.display = eventName && eventName.includes(query) ? '' : 'none';
                });
            });
        }
        function editEvent(eventId) {
            window.location.href = `/edit-event/details/${eventId}`;
        }
        
        let quickEventToDelete = null; // Store the event ID for deletion

function showDeleteModal(quickEventId) {
    quickEventToDelete = quickEventId;
    document.getElementById('deleteModal').classList.remove('hidden');
}

document.getElementById('cancelDelete').addEventListener('click', () => {
    quickEventToDelete = null;
    document.getElementById('deleteModal').classList.add('hidden');
});

document.getElementById('confirmDelete').addEventListener('click', async () => {
    if (!quickEventToDelete) return;

    try {
        const response = await fetch(`/api/quick-events/${quickEventToDelete}/delete`, {
            method: 'DELETE',
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || "Failed to delete quick event");
        }

        fetchUserEvents(); // Refresh the quick events table after deletion
    } catch (error) {
        console.error("Error deleting quick event:", error);
        alert(error.message || "Failed to delete quick event.");
    } finally {
        quickEventToDelete = null;
        document.getElementById('deleteModal').classList.add('hidden');
    }
});

        // Load events on page load
        fetchUserEvents();
    </script>
</body>
</html>
