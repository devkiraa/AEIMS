<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Approval</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        /* Popup Styles */
        .popup-overlay {
            background-color: rgba(0, 0, 0, 0.5);
        }
        .popup-content {
            position: relative;
        }
        .popup-close {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            cursor: pointer;
            font-size: 1.5rem;
            color: #4B5563;
            transition: color 0.3s;
        }
        .popup-close:hover {
            color: #EF4444;
        }
    </style>
    <script>
        const userDept = "<%= userDept %>"; // Embed the userDept variable
        function switchTab(tabId) {
            const tabs = ['pending', 'approved', 'rejected'];
        
            // Hide all tab content and reset tab styles
            tabs.forEach(tab => {
                document.getElementById(tab).classList.add('hidden');
                document.getElementById(`${tab}-tab`).classList.remove('text-blue-600');
                document.getElementById(`${tab}-tab`).classList.add('text-gray-500');
            });
        
            // Show the selected tab's content and update tab style
            document.getElementById(tabId).classList.remove('hidden');
            document.getElementById(`${tabId}-tab`).classList.add('text-blue-600');
            document.getElementById(`${tabId}-tab`).classList.remove('text-gray-500');
        }        

        document.addEventListener('DOMContentLoaded', function () {
            // Fetch events when the page loads
            fetchEvents();
        
            // Toggle dropdown functionality for profile menu
            const profileButton = document.getElementById('profileButton');
            const profileDropdown = document.getElementById('profileDropdown');
            
            profileButton.addEventListener('click', (event) => {
                event.stopPropagation();
                profileDropdown.classList.toggle('hidden');
            });
        
            document.addEventListener('click', (event) => {
                if (!profileDropdown.classList.contains('hidden') && !profileDropdown.contains(event.target) && event.target !== profileButton) {
                    profileDropdown.classList.add('hidden');
                }
            });
        });

        // Fetch event data from the backend

        async function fetchEvents() {
            try {
              const response = await fetch('/api/events');
              const events = await response.json();

              // Separate events by approval status
              const pendingEvents = events.filter(event => (event.evn_approval === 0 && event.evn_dept === userDept));
              const approvedEvents = events.filter(event => (event.evn_approval === 1 && event.evn_dept === userDept));
              const rejectedEvents = events.filter(event => (event.evn_approval === 2 && event.evn_dept === userDept));
          
              // Populate pending events table
              const pendingTable = document.getElementById('pendingEventTable');
              pendingTable.innerHTML = ''; // Clear existing data
              pendingEvents.forEach(event => {
                const row = document.createElement('tr');
                row.innerHTML = `
                  <td class="p-4">${event.evn_name}</td>
                  <td class="p-4">${event.organizer}</td>
                  <td class="p-4 text-yellow-500">Pending</td>
                  <td class="p-4">
                    <button onclick="openPopup('${event.evn_id}', '${event.evn_name}', '${event.evn_desc}', '${event.evn_dept}', '${event.event_sd}', '${event.evn_ed}', '${event.evn_st}', '${event.event_et}', '${event.organizer}')" class="text-blue-600 hover:text-blue-800">View Details</button>
                  </td>
                `;
                pendingTable.appendChild(row);
            });            
          
              // Populate approved events table
              const approvedTable = document.getElementById('approvedEventTable');
              approvedTable.innerHTML = ''; // Clear existing data
              approvedEvents.forEach(event => {
                const row = document.createElement('tr');
                row.innerHTML = `
                  <td class="p-4">${event.evn_name}</td>
                  <td class="p-4">${event.organizer}</td>
                  <td class="p-4 text-green-500">Approved</td>
                  <td class="p-4">-</td>
                `;
                approvedTable.appendChild(row);
              });
          
              // Populate rejected events table
              const rejectedTable = document.getElementById('rejectedEventTable');
              rejectedTable.innerHTML = ''; // Clear existing data
              rejectedEvents.forEach(event => {
                const row = document.createElement('tr');
                row.innerHTML = `
                  <td class="p-4">${event.evn_name}</td>
                  <td class="p-4">${event.organizer}</td>
                  <td class="p-4 text-red-500">Rejected</td>
                  <td class="p-4">-</td>
                `;
                rejectedTable.appendChild(row);
              });
            } catch (error) {
              console.error("Error fetching events: ", error);
            }
        }

        // Function to open popup and show event details
        function openPopup(evn_id, evn_name, evn_desc, evn_dept, event_sd, evn_ed, evn_st, event_et, organizer) {
            const formattedStartDate = new Date(event_sd).toISOString().split('T')[0];
            const formattedEndDate = new Date(evn_ed).toISOString().split('T')[0];

            const popupContent = document.getElementById('popupEventContent');
            popupContent.innerHTML = `
                <p><strong>Event Name:</strong> ${evn_name}</p>
                <p><strong>Description:</strong> ${evn_desc}</p>
                <p><strong>Department:</strong> ${evn_dept}</p>
                <p><strong>Start Date:</strong> ${formattedStartDate}</p>
                <p><strong>End Date:</strong> ${formattedEndDate}</p>
                <p><strong>Start Time:</strong> ${evn_st}</p>
                <p><strong>End Time:</strong> ${event_et}</p>
                <p><strong>Organizer:</strong> ${organizer}</p>
            `;
            document.getElementById('eventPopup').classList.remove('hidden');

            // Set the approve/reject buttons with event ID
            document.getElementById('approveButton').onclick = () => approveEvent(evn_id);
            document.getElementById('rejectButton').onclick = () => rejectEvent(evn_id);
        }

        // Function to close the popup
        function closePopup() {
            document.getElementById('eventPopup').classList.add('hidden');
        }

        // Function to approve the event
        async function approveEvent(eventId) {
            try {
                const response = await fetch(`/api/events/${eventId}/approve`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    closePopup();
                    fetchEvents(); // Refresh the events list to show updated status
                } else {
                    alert("Failed to approve event.");
                }
            } catch (error) {
                console.error("Error approving event:", error);
                alert("An error occurred while approving the event.");
            }
        }

        // Function to reject the event
        async function rejectEvent(eventId) {
            try {
                const response = await fetch(`/api/events/${eventId}/reject`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    closePopup();
                    fetchEvents(); // Refresh the events list to show updated status
                } else {
                    alert("Failed to reject event.");
                }
            } catch (error) {
                console.error("Error rejecting event:", error);
                alert("An error occurred while rejecting the event.");
            }
        }
        
        document.addEventListener('DOMContentLoaded', function () {
            const profileButton = document.getElementById('profileButton');
            const profileDropdown = document.getElementById('profileDropdown');

            // Toggle dropdown on button click
            profileButton.addEventListener('click', (event) => {
                event.stopPropagation();
                profileDropdown.classList.toggle('hidden');
            });

            // Close dropdown if clicked outside
            document.addEventListener('click', (event) => {
                if (!profileDropdown.classList.contains('hidden') && !profileDropdown.contains(event.target) && event.target !== profileButton) {
                    profileDropdown.classList.add('hidden');
                }
            });
        });

    </script>
</head>
<body class="bg-gray-50">
    <div class="min-h-screen flex flex-col">
        <!-- Navbar -->
    <nav class="bg-blue-600 p-4">
        <div class="container mx-auto flex justify-between items-center">
            <!-- Navbar Links -->
            <div class="flex items-center space-x-6">
                <ul class="flex space-x-6 text-white">
                    <!-- Home Link - Always First -->
                    <li><a href="/" class="hover:text-gray-300">Home</a></li>
            
                    <!-- Conditional Links for 'admin' or 'icts' -->
                    <% if (userRole === 'admin' || userRole === 'icts') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                        <li><a href="/inventory" class="hover:text-gray-300">Inventory</a></li>
                        <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                    <% } %>
            
                    <!-- Conditional Links for 'hod' -->
                    <% if (userRole === 'hod') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/user-management" class="hover:text-gray-300">Users</a></li>
                        <li><a href="/dept-events" class="hover:text-gray-300">Dept Events</a></li>
                        <li><a href="/event-approval" class="hover:text-gray-300">Approval</a></li>
                    <% } %>
            
                    <!-- Conditional Links for 'em' -->
                    <% if (userRole === 'em') { %>
                        <li><a href="/book-event" class="hover:text-gray-300">Book</a></li>
                        <li><a href="/my-events" class="hover:text-gray-300">My Events</a></li>
                    <% } %>
            
                    <!-- About Us Link - Always Last -->
                    <li><a href="/about-us" class="hover:text-gray-300">About Us</a></li>
                </ul>
            </div>         

            <!-- Profile Dropdown (Visible on Click) -->
            <div class="relative dropdown">
                <button class="bg-white rounded-full p-2" id="profileButton">
                    <img src="/assets/icons/avatar.svg" alt="User Icon" class="w-6 h-6">
                </button>
                <div class="dropdown-menu absolute hidden right-0 mt-2 w-48 bg-white rounded-lg shadow-lg" id="profileDropdown">
                    <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Profile</a>
                    <a href="/change-password" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Change Password</a>
                    <a href="/logout" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Logout</a>
                </div>
            </div>
        </div>
    </nav>

        <!-- Main Content -->
        <main class="flex-grow container mx-auto p-6 max-w-5xl">
            <h1 class="text-3xl font-bold mb-8">Event Approval</h1>
        
            <!-- Flex container to align tabs and search bar -->
            <div class="mb-6 flex justify-between items-center">
                <!-- Tab navigation -->
                <ul class="flex divide-x divide-gray-300">
                    <li id="pending-tab" class="px-4 text-blue-600 hover:text-gray-700 cursor-pointer" onclick="switchTab('pending')">
                        Pending Events
                    </li>
                    <li id="approved-tab" class="px-4 text-gray-500 hover:text-gray-700 cursor-pointer" onclick="switchTab('approved')">
                        Approved Events
                    </li>
                    <li id="rejected-tab" class="px-4 text-gray-500 hover:text-gray-700 cursor-pointer" onclick="switchTab('rejected')">
                        Rejected Events
                    </li>
                </ul>
                
        
                <!-- Search bar -->
                <div class="w-full md:w-1/2">
                    <input 
                        type="text" 
                        placeholder="Search Event..." 
                        class="w-full p-2 border rounded-lg" 
                        id="searchEvent">
                </div>
            </div>
        
            <!-- Event Tables for Tabs -->
            <div id="pending" class="tab-content">
                <h2 class="text-xl font-semibold mb-4">Pending Events</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-300 rounded-lg">
                        <thead>
                            <tr class="bg-gray-100 text-gray-600 text-left">
                                <th class="p-4">Event Name</th>
                                <th class="p-4">Organizer</th>
                                <th class="p-4">Status</th>
                                <th class="p-4">Action</th>
                            </tr>
                        </thead>
                        <tbody id="pendingEventTable">
                            <!-- Event rows will be populated dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>
        
            <div id="approved" class="tab-content hidden">
                <h2 class="text-xl font-semibold mb-4">Approved Events</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-300 rounded-lg">
                        <thead>
                            <tr class="bg-gray-100 text-gray-600 text-left">
                                <th class="p-4">Event Name</th>
                                <th class="p-4">Organizer</th>
                                <th class="p-4">Status</th>
                                <th class="p-4">Action</th>
                            </tr>
                        </thead>
                        <tbody id="approvedEventTable">
                            <!-- Approved event rows will be populated dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Add another tab for Rejected Events -->
<div id="rejected" class="tab-content hidden">
    <h2 class="text-xl font-semibold mb-4">Rejected Events</h2>
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-300 rounded-lg">
            <thead>
                <tr class="bg-gray-100 text-gray-600 text-left">
                    <th class="p-4">Event Name</th>
                    <th class="p-4">Organizer</th>
                    <th class="p-4">Status</th>
                    <th class="p-4">Action</th>
                </tr>
            </thead>
            <tbody id="rejectedEventTable">
                <!-- Rejected event rows will be populated dynamically -->
            </tbody>
        </table>
    </div>
</div>

        </main>

    </div>

    <!-- Popup Modal for Approving or Rejecting Event -->
    <div id="eventPopup" class="fixed inset-0 hidden flex items-center justify-center popup-overlay">
        <div class="bg-white p-6 rounded-lg shadow-lg max-w-lg w-full popup-content">
            <!-- Close Icon -->
            <span class="popup-close" onclick="closePopup(0)">&times;</span>

            <h2 class="text-xl font-semibold mb-4">Event Details</h2>
            <div id="popupEventContent">
                <!-- Event details will be populated dynamically -->
            </div>
            <div class="mt-4 text-right">
                <button id="approveButton" class="bg-blue-600 text-white px-4 py-2 rounded-lg">
                    Approve
                </button>
                <button id="rejectButton" class="bg-red-600 text-white px-4 py-2 rounded-lg mr-2">
                    Reject
                </button>
                <button onclick="closePopup()" class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg">
                    Cancel
                </button>
            </div>
            
        </div>
    </div>
</body>
</html>
